/*
* generated by Xtext
*/
grammar InternalExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.openetcs.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.openetcs.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.openetcs.dsl.services.ExpressionGrammarAccess;

}

@parser::members {
 
 	private ExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getPhraseAssignment()); }
(rule__Model__PhraseAssignment)
{ after(grammarAccess.getModelAccess().getPhraseAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhrase
entryRulePhrase 
:
{ before(grammarAccess.getPhraseRule()); }
	 rulePhrase
{ after(grammarAccess.getPhraseRule()); } 
	 EOF 
;

// Rule Phrase
rulePhrase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPhraseAccess().getAlternatives()); }
(rule__Phrase__Alternatives)
{ after(grammarAccess.getPhraseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getEvaluationExpressionParserRuleCall()); }
	ruleEvaluationExpression
{ after(grammarAccess.getExpressionAccess().getEvaluationExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvaluationExpression
entryRuleEvaluationExpression 
:
{ before(grammarAccess.getEvaluationExpressionRule()); }
	 ruleEvaluationExpression
{ after(grammarAccess.getEvaluationExpressionRule()); } 
	 EOF 
;

// Rule EvaluationExpression
ruleEvaluationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getEvaluationExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleStatement
entryRuleSingleStatement 
:
{ before(grammarAccess.getSingleStatementRule()); }
	 ruleSingleStatement
{ after(grammarAccess.getSingleStatementRule()); } 
	 EOF 
;

// Rule SingleStatement
ruleSingleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleStatementAccess().getGroup()); }
(rule__SingleStatement__Group__0)
{ after(grammarAccess.getSingleStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelfStatement
entryRuleSelfStatement 
:
{ before(grammarAccess.getSelfStatementRule()); }
	 ruleSelfStatement
{ after(grammarAccess.getSelfStatementRule()); } 
	 EOF 
;

// Rule SelfStatement
ruleSelfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelfStatementAccess().getGroup()); }
(rule__SelfStatement__Group__0)
{ after(grammarAccess.getSelfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiStatement
entryRuleMultiStatement 
:
{ before(grammarAccess.getMultiStatementRule()); }
	 ruleMultiStatement
{ after(grammarAccess.getMultiStatementRule()); } 
	 EOF 
;

// Rule MultiStatement
ruleMultiStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiStatementAccess().getGroup()); }
(rule__MultiStatement__Group__0)
{ after(grammarAccess.getMultiStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDashOperation
entryRuleDashOperation 
:
{ before(grammarAccess.getDashOperationRule()); }
	 ruleDashOperation
{ after(grammarAccess.getDashOperationRule()); } 
	 EOF 
;

// Rule DashOperation
ruleDashOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDashOperationAccess().getGroup()); }
(rule__DashOperation__Group__0)
{ after(grammarAccess.getDashOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePointOperation
entryRulePointOperation 
:
{ before(grammarAccess.getPointOperationRule()); }
	 rulePointOperation
{ after(grammarAccess.getPointOperationRule()); } 
	 EOF 
;

// Rule PointOperation
rulePointOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPointOperationAccess().getGroup()); }
(rule__PointOperation__Group__0)
{ after(grammarAccess.getPointOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePowOperation
entryRulePowOperation 
:
{ before(grammarAccess.getPowOperationRule()); }
	 rulePowOperation
{ after(grammarAccess.getPowOperationRule()); } 
	 EOF 
;

// Rule PowOperation
rulePowOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowOperationAccess().getGroup()); }
(rule__PowOperation__Group__0)
{ after(grammarAccess.getPowOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTermParserRuleCall()); }
	ruleTerm
{ after(grammarAccess.getUnaryExpressionAccess().getTermParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDesignator
entryRuleDesignator 
:
{ before(grammarAccess.getDesignatorRule()); }
	 ruleDesignator
{ after(grammarAccess.getDesignatorRule()); } 
	 EOF 
;

// Rule Designator
ruleDesignator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDesignatorAccess().getValueAssignment()); }
(rule__Designator__ValueAssignment)
{ after(grammarAccess.getDesignatorAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Phrase__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhraseAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getPhraseAccess().getExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPhraseAccess().getStatementParserRuleCall_1()); }
	ruleStatement
{ after(grammarAccess.getPhraseAccess().getStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSingleStatementParserRuleCall_0()); }
	ruleSingleStatement
{ after(grammarAccess.getStatementAccess().getSingleStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSelfStatementParserRuleCall_1()); }
	ruleSelfStatement
{ after(grammarAccess.getStatementAccess().getSelfStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getMultiStatementParserRuleCall_2()); }
	ruleMultiStatement
{ after(grammarAccess.getStatementAccess().getMultiStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }

	'<=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }

	'>=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpInKeyword_1_1_0_4()); }

	'in' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpInKeyword_1_1_0_4()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpNotInKeyword_1_1_0_5()); }

	'not in' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpNotInKeyword_1_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getOpPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getDashOperationAccess().getOpPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getDashOperationAccess().getOpHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getDashOperationAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getOpAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getPointOperationAccess().getOpAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getPointOperationAccess().getOpSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getPointOperationAccess().getOpSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
(rule__PrimaryExpression__Group_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getDesignatorParserRuleCall_0()); }
	ruleDesignator
{ after(grammarAccess.getTermAccess().getDesignatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_2()); }
(rule__Term__Group_2__0)
{ after(grammarAccess.getTermAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_3()); }
(rule__Term__Group_3__0)
{ after(grammarAccess.getTermAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStatement__Group__0__Impl
	rule__SingleStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getDesgnatorAssignment_0()); }
(rule__SingleStatement__DesgnatorAssignment_0)
{ after(grammarAccess.getSingleStatementAccess().getDesgnatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStatement__Group__1__Impl
	rule__SingleStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getLessThanSignHyphenMinusKeyword_1()); }

	'<-' 

{ after(grammarAccess.getSingleStatementAccess().getLessThanSignHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getExpressionAssignment_2()); }
(rule__SingleStatement__ExpressionAssignment_2)
{ after(grammarAccess.getSingleStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelfStatement__Group__0__Impl
	rule__SelfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfStatementAccess().getCurrentStateKeyword_0()); }

	'CurrentState' 

{ after(grammarAccess.getSelfStatementAccess().getCurrentStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelfStatement__Group__1__Impl
	rule__SelfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfStatementAccess().getLessThanSignHyphenMinusKeyword_1()); }

	'<-' 

{ after(grammarAccess.getSelfStatementAccess().getLessThanSignHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelfStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfStatementAccess().getExpressionAssignment_2()); }
(rule__SelfStatement__ExpressionAssignment_2)
{ after(grammarAccess.getSelfStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiStatement__Group__0__Impl
	rule__MultiStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getDesgnatorAssignment_0()); }
(rule__MultiStatement__DesgnatorAssignment_0)
{ after(grammarAccess.getMultiStatementAccess().getDesgnatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiStatement__Group__1__Impl
	rule__MultiStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMultiStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiStatement__Group__2__Impl
	rule__MultiStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getExpressionsAssignment_2()); }
(rule__MultiStatement__ExpressionsAssignment_2)*
{ after(grammarAccess.getMultiStatementAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMultiStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
(rule__OrExpression__OpAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
(rule__OrExpression__RightAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
(rule__AndExpression__OpAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getDashOperationParserRuleCall_0()); }
	ruleDashOperation
{ after(grammarAccess.getEqualityExpressionAccess().getDashOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
(rule__EqualityExpression__OpAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualityExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DashOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DashOperation__Group__0__Impl
	rule__DashOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getPointOperationParserRuleCall_0()); }
	rulePointOperation
{ after(grammarAccess.getDashOperationAccess().getPointOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DashOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DashOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getGroup_1()); }
(rule__DashOperation__Group_1__0)*
{ after(grammarAccess.getDashOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DashOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DashOperation__Group_1__0__Impl
	rule__DashOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getDashOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getDashOperationAccess().getDashOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DashOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DashOperation__Group_1__1__Impl
	rule__DashOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getOpAssignment_1_1()); }
(rule__DashOperation__OpAssignment_1_1)
{ after(grammarAccess.getDashOperationAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DashOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DashOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getRightAssignment_1_2()); }
(rule__DashOperation__RightAssignment_1_2)
{ after(grammarAccess.getDashOperationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PointOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PointOperation__Group__0__Impl
	rule__PointOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getPowOperationParserRuleCall_0()); }
	rulePowOperation
{ after(grammarAccess.getPointOperationAccess().getPowOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PointOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PointOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getGroup_1()); }
(rule__PointOperation__Group_1__0)*
{ after(grammarAccess.getPointOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PointOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PointOperation__Group_1__0__Impl
	rule__PointOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getPointOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPointOperationAccess().getPointOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PointOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PointOperation__Group_1__1__Impl
	rule__PointOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getOpAssignment_1_1()); }
(rule__PointOperation__OpAssignment_1_1)
{ after(grammarAccess.getPointOperationAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PointOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PointOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getRightAssignment_1_2()); }
(rule__PointOperation__RightAssignment_1_2)
{ after(grammarAccess.getPointOperationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PowOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowOperation__Group__0__Impl
	rule__PowOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getPowOperationAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getGroup_1()); }
(rule__PowOperation__Group_1__0)*
{ after(grammarAccess.getPowOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowOperation__Group_1__0__Impl
	rule__PowOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getPowOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPowOperationAccess().getPowOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowOperation__Group_1__1__Impl
	rule__PowOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getOpAssignment_1_1()); }
(rule__PowOperation__OpAssignment_1_1)
{ after(grammarAccess.getPowOperationAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getRightAssignment_1_2()); }
(rule__PowOperation__RightAssignment_1_2)
{ after(grammarAccess.getPowOperationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getEvaluationExpressionParserRuleCall_1_1()); }
	ruleEvaluationExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getEvaluationExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNOTKeyword_2_0()); }

	'NOT (' 

{ after(grammarAccess.getPrimaryExpressionAccess().getNOTKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getEvaluationExpressionParserRuleCall_2_1()); }
	ruleEvaluationExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getEvaluationExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStringValueAction_1_0()); }
(

)
{ after(grammarAccess.getTermAccess().getStringValueAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_1_1()); }
(rule__Term__ValueAssignment_1_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__0__Impl
	rule__Term__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getIntegerValueAction_2_0()); }
(

)
{ after(grammarAccess.getTermAccess().getIntegerValueAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_2_1()); }
(rule__Term__ValueAssignment_2_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_3__0__Impl
	rule__Term__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getDoubleValueAction_3_0()); }
(

)
{ after(grammarAccess.getTermAccess().getDoubleValueAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_3_1()); }
(rule__Term__ValueAssignment_3_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__PhraseAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPhrasePhraseParserRuleCall_0()); }
	rulePhrase{ after(grammarAccess.getModelAccess().getPhrasePhraseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__DesgnatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getDesgnatorDesignatorParserRuleCall_0_0()); }
	ruleDesignator{ after(grammarAccess.getSingleStatementAccess().getDesgnatorDesignatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSingleStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelfStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSelfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__DesgnatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getDesgnatorDesignatorParserRuleCall_0_0()); }
	ruleDesignator{ after(grammarAccess.getMultiStatementAccess().getDesgnatorDesignatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiStatement__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiStatementAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getMultiStatementAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpORKeyword_1_1_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOpORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getOrExpressionAccess().getOpORKeyword_1_1_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOpORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpANDKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOpANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndExpressionAccess().getOpANDKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOpANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__EqualityExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightDashOperationParserRuleCall_1_2_0()); }
	ruleDashOperation{ after(grammarAccess.getEqualityExpressionAccess().getRightDashOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getOpAlternatives_1_1_0()); }
(rule__DashOperation__OpAlternatives_1_1_0)
{ after(grammarAccess.getDashOperationAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DashOperation__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashOperationAccess().getRightPointOperationParserRuleCall_1_2_0()); }
	rulePointOperation{ after(grammarAccess.getDashOperationAccess().getRightPointOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getOpAlternatives_1_1_0()); }
(rule__PointOperation__OpAlternatives_1_1_0)
{ after(grammarAccess.getPointOperationAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PointOperation__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointOperationAccess().getRightPowOperationParserRuleCall_1_2_0()); }
	rulePowOperation{ after(grammarAccess.getPointOperationAccess().getRightPowOperationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getOpCircumflexAccentKeyword_1_1_0()); }
(
{ before(grammarAccess.getPowOperationAccess().getOpCircumflexAccentKeyword_1_1_0()); }

	'^' 

{ after(grammarAccess.getPowOperationAccess().getOpCircumflexAccentKeyword_1_1_0()); }
)

{ after(grammarAccess.getPowOperationAccess().getOpCircumflexAccentKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowOperation__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowOperationAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPowOperationAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getTermAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getTermAccess().getValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueDOUBLETerminalRuleCall_3_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTermAccess().getValueDOUBLETerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignatorAccess().getValueEObjectCrossReference_0()); }
(
{ before(grammarAccess.getDesignatorAccess().getValueEObjectFQNParserRuleCall_0_1()); }
	ruleFQN{ after(grammarAccess.getDesignatorAccess().getValueEObjectFQNParserRuleCall_0_1()); }
)
{ after(grammarAccess.getDesignatorAccess().getValueEObjectCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


