/*
* generated by Xtext
*/
grammar InternalExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.openetcs.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.openetcs.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.openetcs.dsl.services.ExpressionGrammarAccess;

}

@parser::members {
 
 	private ExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getExpressionAssignment()); }
(rule__Model__ExpressionAssignment)
{ after(grammarAccess.getModelAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	ruleOr
{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquality
entryRuleEquality 
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getGroup()); }
(rule__Equality__Group__0)
{ after(grammarAccess.getEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall()); }
	ruleUnaryExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTermParserRuleCall()); }
	ruleTerm
{ after(grammarAccess.getUnaryExpressionAccess().getTermParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDesignator
entryRuleDesignator 
:
{ before(grammarAccess.getDesignatorRule()); }
	 ruleDesignator
{ after(grammarAccess.getDesignatorRule()); } 
	 EOF 
;

// Rule Designator
ruleDesignator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDesignatorAccess().getValueAssignment()); }
(rule__Designator__ValueAssignment)
{ after(grammarAccess.getDesignatorAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Equality__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_2_0()); }
(rule__Equality__Group_2_0__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_2_1()); }
(rule__Equality__Group_2_1__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_1()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_2_2()); }
(rule__Equality__Group_2_2__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_2()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_2_3()); }
(rule__Equality__Group_2_3__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_3()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_2_4()); }
(rule__Equality__Group_2_4__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_4()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_2_5()); }
(rule__Equality__Group_2_5__0)
{ after(grammarAccess.getEqualityAccess().getGroup_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getDesignatorParserRuleCall_0()); }
	ruleDesignator
{ after(grammarAccess.getTermAccess().getDesignatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_2()); }
(rule__Term__Group_2__0)
{ after(grammarAccess.getTermAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_3()); }
(rule__Term__Group_3__0)
{ after(grammarAccess.getTermAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrAction_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
	rule__Or__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getLeftAssignment_1()); }
(rule__Or__LeftAssignment_1)
{ after(grammarAccess.getOrAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_2()); }
(rule__Or__Group_2__0)?
{ after(grammarAccess.getOrAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__0__Impl
	rule__Or__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getORKeyword_2_0()); }

	'OR' 

{ after(grammarAccess.getOrAccess().getORKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_2_1()); }
(rule__Or__RightAssignment_2_1)
{ after(grammarAccess.getOrAccess().getRightAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndAction_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
	rule__And__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getLeftAssignment_1()); }
(rule__And__LeftAssignment_1)
{ after(grammarAccess.getAndAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_2()); }
(rule__And__Group_2__0)?
{ after(grammarAccess.getAndAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2__0__Impl
	rule__And__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getANDKeyword_2_0()); }

	'AND' 

{ after(grammarAccess.getAndAccess().getANDKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_2_1()); }
(rule__And__RightAssignment_2_1)
{ after(grammarAccess.getAndAccess().getRightAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualityAction_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualityAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__1__Impl
	rule__Equality__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getLeftAssignment_1()); }
(rule__Equality__LeftAssignment_1)
{ after(grammarAccess.getEqualityAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getAlternatives_2()); }
(rule__Equality__Alternatives_2)?
{ after(grammarAccess.getEqualityAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Equality__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_0__0__Impl
	rule__Equality__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_2_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_0_1()); }
(rule__Equality__RightAssignment_2_0_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_1__0__Impl
	rule__Equality__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_2_1_0()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_1_1()); }
(rule__Equality__RightAssignment_2_1_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_2__0__Impl
	rule__Equality__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getLessThanSignEqualsSignKeyword_2_2_0()); }

	'<=' 

{ after(grammarAccess.getEqualityAccess().getLessThanSignEqualsSignKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_2_1()); }
(rule__Equality__RightAssignment_2_2_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_3__0__Impl
	rule__Equality__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGreaterThanSignEqualsSignKeyword_2_3_0()); }

	'>=' 

{ after(grammarAccess.getEqualityAccess().getGreaterThanSignEqualsSignKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_3_1()); }
(rule__Equality__RightAssignment_2_3_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_2_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_4__0__Impl
	rule__Equality__Group_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getNotInKeyword_2_4_0()); }

	'not in' 

{ after(grammarAccess.getEqualityAccess().getNotInKeyword_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_4_1()); }
(rule__Equality__RightAssignment_2_4_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_2_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_5__0__Impl
	rule__Equality__Group_2_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getInKeyword_2_5_0()); }

	'in' 

{ after(grammarAccess.getEqualityAccess().getInKeyword_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_2_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_2_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_2_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2_5_1()); }
(rule__Equality__RightAssignment_2_5_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStringValueAction_1_0()); }
(

)
{ after(grammarAccess.getTermAccess().getStringValueAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_1_1()); }
(rule__Term__ValueAssignment_1_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__0__Impl
	rule__Term__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getIntegerValueAction_2_0()); }
(

)
{ after(grammarAccess.getTermAccess().getIntegerValueAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_2_1()); }
(rule__Term__ValueAssignment_2_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_3__0__Impl
	rule__Term__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getDoubleValueAction_3_0()); }
(

)
{ after(grammarAccess.getTermAccess().getDoubleValueAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueAssignment_3_1()); }
(rule__Term__ValueAssignment_3_1)
{ after(grammarAccess.getTermAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getExpressionExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getModelAccess().getExpressionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getLeftAndParserRuleCall_1_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getLeftAndParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_2_1_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getLeftEqualityParserRuleCall_1_0()); }
	ruleEquality{ after(grammarAccess.getAndAccess().getLeftEqualityParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_2_1_0()); }
	ruleEquality{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getLeftPrimaryExpressionParserRuleCall_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getLeftPrimaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_0_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_1_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_2_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_3_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_4_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_5_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getEqualityAccess().getRightPrimaryExpressionParserRuleCall_2_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getTermAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getTermAccess().getValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getValueDOUBLETerminalRuleCall_3_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTermAccess().getValueDOUBLETerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignatorAccess().getValueEObjectCrossReference_0()); }
(
{ before(grammarAccess.getDesignatorAccess().getValueEObjectIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getDesignatorAccess().getValueEObjectIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getDesignatorAccess().getValueEObjectCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


