/*
* generated by Xtext
*/
package org.openetcs.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.openetcs.dsl.services.ExpressionGrammarAccess;

public class ExpressionParser extends AbstractContentAssistParser {
	
	@Inject
	private ExpressionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser createParser() {
		org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser result = new org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEqualityAccess().getAlternatives_2(), "rule__Equality__Alternatives_2");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_2(), "rule__Or__Group_2__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_2(), "rule__And__Group_2__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_0(), "rule__Equality__Group_2_0__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_1(), "rule__Equality__Group_2_1__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_2(), "rule__Equality__Group_2_2__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_3(), "rule__Equality__Group_2_3__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_4(), "rule__Equality__Group_2_4__0");
					put(grammarAccess.getEqualityAccess().getGroup_2_5(), "rule__Equality__Group_2_5__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_2(), "rule__Term__Group_2__0");
					put(grammarAccess.getTermAccess().getGroup_3(), "rule__Term__Group_3__0");
					put(grammarAccess.getModelAccess().getExpressionAssignment(), "rule__Model__ExpressionAssignment");
					put(grammarAccess.getOrAccess().getLeftAssignment_1(), "rule__Or__LeftAssignment_1");
					put(grammarAccess.getOrAccess().getRightAssignment_2_1(), "rule__Or__RightAssignment_2_1");
					put(grammarAccess.getAndAccess().getLeftAssignment_1(), "rule__And__LeftAssignment_1");
					put(grammarAccess.getAndAccess().getRightAssignment_2_1(), "rule__And__RightAssignment_2_1");
					put(grammarAccess.getEqualityAccess().getLeftAssignment_1(), "rule__Equality__LeftAssignment_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_0_1(), "rule__Equality__RightAssignment_2_0_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_1_1(), "rule__Equality__RightAssignment_2_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_2_1(), "rule__Equality__RightAssignment_2_2_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_3_1(), "rule__Equality__RightAssignment_2_3_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_4_1(), "rule__Equality__RightAssignment_2_4_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2_5_1(), "rule__Equality__RightAssignment_2_5_1");
					put(grammarAccess.getTermAccess().getValueAssignment_1_1(), "rule__Term__ValueAssignment_1_1");
					put(grammarAccess.getTermAccess().getValueAssignment_2_1(), "rule__Term__ValueAssignment_2_1");
					put(grammarAccess.getTermAccess().getValueAssignment_3_1(), "rule__Term__ValueAssignment_3_1");
					put(grammarAccess.getDesignatorAccess().getValueAssignment(), "rule__Designator__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser typedParser = (org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExpressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
