/**
 */
package org.openetcs.model.ertmsformalspecs.requirements.messages.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.openetcs.model.ertmsformalspecs.requirements.messages.util.MessagesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MessagesItemProviderAdapterFactory extends MessagesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MessagesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.TypeSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSpecItemProvider typeSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.TypeSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSpecAdapter() {
		if (typeSpecItemProvider == null) {
			typeSpecItemProvider = new TypeSpecItemProvider(this);
		}

		return typeSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.CharValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharValueItemProvider charValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.CharValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharValueAdapter() {
		if (charValueItemProvider == null) {
			charValueItemProvider = new CharValueItemProvider(this);
		}

		return charValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.TypeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeValueItemProvider typeValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.TypeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeValueAdapter() {
		if (typeValueItemProvider == null) {
			typeValueItemProvider = new TypeValueItemProvider(this);
		}

		return typeValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.ResolutionFormula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionFormulaItemProvider resolutionFormulaItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.ResolutionFormula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionFormulaAdapter() {
		if (resolutionFormulaItemProvider == null) {
			resolutionFormulaItemProvider = new ResolutionFormulaItemProvider(this);
		}

		return resolutionFormulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.SpecialOrReservedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecialOrReservedValueItemProvider specialOrReservedValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.SpecialOrReservedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecialOrReservedValueAdapter() {
		if (specialOrReservedValueItemProvider == null) {
			specialOrReservedValueItemProvider = new SpecialOrReservedValueItemProvider(this);
		}

		return specialOrReservedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.SingleValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleValueItemProvider singleValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.SingleValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleValueAdapter() {
		if (singleValueItemProvider == null) {
			singleValueItemProvider = new SingleValueItemProvider(this);
		}

		return singleValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Mask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaskItemProvider maskItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Mask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaskAdapter() {
		if (maskItemProvider == null) {
			maskItemProvider = new MaskItemProvider(this);
		}

		return maskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Match} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchItemProvider matchItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Match}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchAdapter() {
		if (matchItemProvider == null) {
			matchItemProvider = new MatchItemProvider(this);
		}

		return matchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.MatchRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchRangeItemProvider matchRangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.MatchRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchRangeAdapter() {
		if (matchRangeItemProvider == null) {
			matchRangeItemProvider = new MatchRangeItemProvider(this);
		}

		return matchRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Meaning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeaningItemProvider meaningItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Meaning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeaningAdapter() {
		if (meaningItemProvider == null) {
			meaningItemProvider = new MeaningItemProvider(this);
		}

		return meaningItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Media} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MediaItemProvider mediaItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.Media}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMediaAdapter() {
		if (mediaItemProvider == null) {
			mediaItemProvider = new MediaItemProvider(this);
		}

		return mediaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openetcs.model.ertmsformalspecs.requirements.messages.MessageVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageVariableItemProvider messageVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.openetcs.model.ertmsformalspecs.requirements.messages.MessageVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageVariableAdapter() {
		if (messageVariableItemProvider == null) {
			messageVariableItemProvider = new MessageVariableItemProvider(this);
		}

		return messageVariableItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (typeSpecItemProvider != null) typeSpecItemProvider.dispose();
		if (charValueItemProvider != null) charValueItemProvider.dispose();
		if (typeValueItemProvider != null) typeValueItemProvider.dispose();
		if (resolutionFormulaItemProvider != null) resolutionFormulaItemProvider.dispose();
		if (specialOrReservedValueItemProvider != null) specialOrReservedValueItemProvider.dispose();
		if (singleValueItemProvider != null) singleValueItemProvider.dispose();
		if (maskItemProvider != null) maskItemProvider.dispose();
		if (matchItemProvider != null) matchItemProvider.dispose();
		if (matchRangeItemProvider != null) matchRangeItemProvider.dispose();
		if (meaningItemProvider != null) meaningItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (mediaItemProvider != null) mediaItemProvider.dispose();
		if (messageVariableItemProvider != null) messageVariableItemProvider.dispose();
	}

}
