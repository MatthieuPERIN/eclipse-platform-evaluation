/*
* generated by Xtext
*/
package org.openetcs.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.openetcs.dsl.services.ExpressionGrammarAccess;

public class ExpressionParser extends AbstractContentAssistParser {
	
	@Inject
	private ExpressionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser createParser() {
		org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser result = new org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPhraseAccess().getAlternatives(), "rule__Phrase__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0(), "rule__EqualityExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getDashOperationAccess().getOpAlternatives_1_1_0(), "rule__DashOperation__OpAlternatives_1_1_0");
					put(grammarAccess.getPointOperationAccess().getOpAlternatives_1_1_0(), "rule__PointOperation__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getSingleStatementAccess().getGroup(), "rule__SingleStatement__Group__0");
					put(grammarAccess.getSelfStatementAccess().getGroup(), "rule__SelfStatement__Group__0");
					put(grammarAccess.getMultiStatementAccess().getGroup(), "rule__MultiStatement__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getDashOperationAccess().getGroup(), "rule__DashOperation__Group__0");
					put(grammarAccess.getDashOperationAccess().getGroup_1(), "rule__DashOperation__Group_1__0");
					put(grammarAccess.getPointOperationAccess().getGroup(), "rule__PointOperation__Group__0");
					put(grammarAccess.getPointOperationAccess().getGroup_1(), "rule__PointOperation__Group_1__0");
					put(grammarAccess.getPowOperationAccess().getGroup(), "rule__PowOperation__Group__0");
					put(grammarAccess.getPowOperationAccess().getGroup_1(), "rule__PowOperation__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_2(), "rule__Term__Group_2__0");
					put(grammarAccess.getTermAccess().getGroup_3(), "rule__Term__Group_3__0");
					put(grammarAccess.getModelAccess().getPhraseAssignment(), "rule__Model__PhraseAssignment");
					put(grammarAccess.getSingleStatementAccess().getDesgnatorAssignment_0(), "rule__SingleStatement__DesgnatorAssignment_0");
					put(grammarAccess.getSingleStatementAccess().getExpressionAssignment_2(), "rule__SingleStatement__ExpressionAssignment_2");
					put(grammarAccess.getSelfStatementAccess().getExpressionAssignment_2(), "rule__SelfStatement__ExpressionAssignment_2");
					put(grammarAccess.getMultiStatementAccess().getDesgnatorAssignment_0(), "rule__MultiStatement__DesgnatorAssignment_0");
					put(grammarAccess.getMultiStatementAccess().getExpressionsAssignment_2(), "rule__MultiStatement__ExpressionsAssignment_2");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1(), "rule__OrExpression__OpAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1(), "rule__AndExpression__OpAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
					put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1(), "rule__EqualityExpression__OpAssignment_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2(), "rule__EqualityExpression__RightAssignment_1_2");
					put(grammarAccess.getDashOperationAccess().getOpAssignment_1_1(), "rule__DashOperation__OpAssignment_1_1");
					put(grammarAccess.getDashOperationAccess().getRightAssignment_1_2(), "rule__DashOperation__RightAssignment_1_2");
					put(grammarAccess.getPointOperationAccess().getOpAssignment_1_1(), "rule__PointOperation__OpAssignment_1_1");
					put(grammarAccess.getPointOperationAccess().getRightAssignment_1_2(), "rule__PointOperation__RightAssignment_1_2");
					put(grammarAccess.getPowOperationAccess().getOpAssignment_1_1(), "rule__PowOperation__OpAssignment_1_1");
					put(grammarAccess.getPowOperationAccess().getRightAssignment_1_2(), "rule__PowOperation__RightAssignment_1_2");
					put(grammarAccess.getTermAccess().getValueAssignment_1_1(), "rule__Term__ValueAssignment_1_1");
					put(grammarAccess.getTermAccess().getValueAssignment_2_1(), "rule__Term__ValueAssignment_2_1");
					put(grammarAccess.getTermAccess().getValueAssignment_3_1(), "rule__Term__ValueAssignment_3_1");
					put(grammarAccess.getDesignatorAccess().getValueAssignment(), "rule__Designator__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser typedParser = (org.openetcs.dsl.ui.contentassist.antlr.internal.InternalExpressionParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExpressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
