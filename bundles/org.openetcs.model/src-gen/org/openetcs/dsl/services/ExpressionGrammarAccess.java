/*
* generated by Xtext
*/
package org.openetcs.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPhraseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPhrasePhraseParserRuleCall_0 = (RuleCall)cPhraseAssignment.eContents().get(0);
		
		//Model:
		//
		//	phrase=Phrase;
		public ParserRule getRule() { return rule; }

		//phrase=Phrase
		public Assignment getPhraseAssignment() { return cPhraseAssignment; }

		//Phrase
		public RuleCall getPhrasePhraseParserRuleCall_0() { return cPhrasePhraseParserRuleCall_0; }
	}

	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Phrase:
		//
		//	Expression | StatementList;
		public ParserRule getRule() { return rule; }

		//Expression | StatementList
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
	}

	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadStatementParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailStatementListParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		//StatementList:
		//
		//	head=Statement ";" tail=StatementList?;
		public ParserRule getRule() { return rule; }

		//head=Statement ";" tail=StatementList?
		public Group getGroup() { return cGroup; }

		//head=Statement
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Statement
		public RuleCall getHeadStatementParserRuleCall_0_0() { return cHeadStatementParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//tail=StatementList?
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//StatementList
		public RuleCall getTailStatementListParserRuleCall_2_0() { return cTailStatementListParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final RuleCall cAssignmentStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	| ProcedureCall
		//
		//Statement:
		//
		//	AssignmentStatement;
		public ParserRule getRule() { return rule; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall() { return cAssignmentStatementParserRuleCall; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableAssignmentStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfAssignmentStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignmentStatement:
		//
		//	VariableAssignmentStatement | SelfAssignmentStatement;
		public ParserRule getRule() { return rule; }

		//VariableAssignmentStatement | SelfAssignmentStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableAssignmentStatement
		public RuleCall getVariableAssignmentStatementParserRuleCall_0() { return cVariableAssignmentStatementParserRuleCall_0; }

		//SelfAssignmentStatement
		public RuleCall getSelfAssignmentStatementParserRuleCall_1() { return cSelfAssignmentStatementParserRuleCall_1; }
	}

	public class VariableAssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//VariableAssignmentStatement:
		//
		//	designator=Designator "<-" expression=Expression;
		public ParserRule getRule() { return rule; }

		//designator=Designator "<-" expression=Expression
		public Group getGroup() { return cGroup; }

		//designator=Designator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }

		//Designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_0() { return cDesignatorDesignatorParserRuleCall_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SelfAssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfAssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrentStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SelfAssignmentStatement:
		//
		//	"CurrentState" "<-" expression=Expression;
		public ParserRule getRule() { return rule; }

		//"CurrentState" "<-" expression=Expression
		public Group getGroup() { return cGroup; }

		//"CurrentState"
		public Keyword getCurrentStateKeyword_0() { return cCurrentStateKeyword_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//
		//	OrExpression;
		public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cOrExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpORKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightOrExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//
		//	AndExpression {OrExpression.left=current} (=> op="OR" right=OrExpression)?;
		public ParserRule getRule() { return rule; }

		//AndExpression {OrExpression.left=current} (=> op="OR" right=OrExpression)?
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1() { return cOrExpressionLeftAction_1; }

		//(=> op="OR" right=OrExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op="OR"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"OR"
		public Keyword getOpORKeyword_2_0_0() { return cOpORKeyword_2_0_0; }

		//right=OrExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_2_1_0() { return cRightOrExpressionParserRuleCall_2_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cAndExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpANDKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//
		//	EqualityExpression {AndExpression.left=current} (=> op="AND" right=AndExpression)?;
		public ParserRule getRule() { return rule; }

		//EqualityExpression {AndExpression.left=current} (=> op="AND" right=AndExpression)?
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1() { return cAndExpressionLeftAction_1; }

		//(=> op="AND" right=AndExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op="AND"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"AND"
		public Keyword getOpANDKeyword_2_0_0() { return cOpANDKeyword_2_0_0; }

		//right=AndExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_2_1_0() { return cRightAndExpressionParserRuleCall_2_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDashExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cEqualityExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_2_0_0_2 = (Keyword)cOpAlternatives_2_0_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_2_0_0_3 = (Keyword)cOpAlternatives_2_0_0.eContents().get(3);
		private final Keyword cOpInKeyword_2_0_0_4 = (Keyword)cOpAlternatives_2_0_0.eContents().get(4);
		private final Keyword cOpNotInKeyword_2_0_0_5 = (Keyword)cOpAlternatives_2_0_0.eContents().get(5);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//
		//	DashExpression {EqualityExpression.left=current} (=> op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
		//
		//	right=EqualityExpression)?;
		public ParserRule getRule() { return rule; }

		//DashExpression {EqualityExpression.left=current} (=> op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
		//
		//right=EqualityExpression)?
		public Group getGroup() { return cGroup; }

		//DashExpression
		public RuleCall getDashExpressionParserRuleCall_0() { return cDashExpressionParserRuleCall_0; }

		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1() { return cEqualityExpressionLeftAction_1; }

		//(=> op=("==" | "!=" | "<=" | ">=" | "in" | "not in") right=EqualityExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"==" | "!=" | "<=" | ">=" | "in" | "not in"
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_2_0_0_0() { return cOpEqualsSignEqualsSignKeyword_2_0_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_2_0_0_1() { return cOpExclamationMarkEqualsSignKeyword_2_0_0_1; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_2_0_0_2() { return cOpLessThanSignEqualsSignKeyword_2_0_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_2_0_0_3() { return cOpGreaterThanSignEqualsSignKeyword_2_0_0_3; }

		//"in"
		public Keyword getOpInKeyword_2_0_0_4() { return cOpInKeyword_2_0_0_4; }

		//"not in"
		public Keyword getOpNotInKeyword_2_0_0_5() { return cOpNotInKeyword_2_0_0_5; }

		//right=EqualityExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_2_1_0() { return cRightEqualityExpressionParserRuleCall_2_1_0; }
	}

	public class DashExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DashExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPointExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cDashExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightDashExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//DashExpression returns Expression:
		//
		//	PointExpression {DashExpression.left=current} (=> op=("+" | "-") right=DashExpression)?;
		public ParserRule getRule() { return rule; }

		//PointExpression {DashExpression.left=current} (=> op=("+" | "-") right=DashExpression)?
		public Group getGroup() { return cGroup; }

		//PointExpression
		public RuleCall getPointExpressionParserRuleCall_0() { return cPointExpressionParserRuleCall_0; }

		//{DashExpression.left=current}
		public Action getDashExpressionLeftAction_1() { return cDashExpressionLeftAction_1; }

		//(=> op=("+" | "-") right=DashExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op=("+" | "-")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"+" | "-"
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_2_0_0_0() { return cOpPlusSignKeyword_2_0_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_2_0_0_1() { return cOpHyphenMinusKeyword_2_0_0_1; }

		//right=DashExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//DashExpression
		public RuleCall getRightDashExpressionParserRuleCall_2_1_0() { return cRightDashExpressionParserRuleCall_2_1_0; }
	}

	public class PointExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cPointExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cOpAlternatives_2_0_0 = (Alternatives)cOpAssignment_2_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_2_0_0_0 = (Keyword)cOpAlternatives_2_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_2_0_0_1 = (Keyword)cOpAlternatives_2_0_0.eContents().get(1);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightPointExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//PointExpression returns Expression:
		//
		//	PowExpression {PointExpression.left=current} (=> op=("*" | "/") right=PointExpression)?;
		public ParserRule getRule() { return rule; }

		//PowExpression {PointExpression.left=current} (=> op=("*" | "/") right=PointExpression)?
		public Group getGroup() { return cGroup; }

		//PowExpression
		public RuleCall getPowExpressionParserRuleCall_0() { return cPowExpressionParserRuleCall_0; }

		//{PointExpression.left=current}
		public Action getPointExpressionLeftAction_1() { return cPointExpressionLeftAction_1; }

		//(=> op=("*" | "/") right=PointExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op=("*" | "/")
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"*" | "/"
		public Alternatives getOpAlternatives_2_0_0() { return cOpAlternatives_2_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_2_0_0_0() { return cOpAsteriskKeyword_2_0_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_2_0_0_1() { return cOpSolidusKeyword_2_0_0_1; }

		//right=PointExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//PointExpression
		public RuleCall getRightPointExpressionParserRuleCall_2_1_0() { return cRightPointExpressionParserRuleCall_2_1_0; }
	}

	public class PowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifierExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cPowExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpCircumflexAccentKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightPowExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//PowExpression returns Expression:
		//
		//	QualifierExpression {PowExpression.left=current} (=> op="^" right=PowExpression)?;
		public ParserRule getRule() { return rule; }

		//QualifierExpression {PowExpression.left=current} (=> op="^" right=PowExpression)?
		public Group getGroup() { return cGroup; }

		//QualifierExpression
		public RuleCall getQualifierExpressionParserRuleCall_0() { return cQualifierExpressionParserRuleCall_0; }

		//{PowExpression.left=current}
		public Action getPowExpressionLeftAction_1() { return cPowExpressionLeftAction_1; }

		//(=> op="^" right=PowExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op="^"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_2_0_0() { return cOpCircumflexAccentKeyword_2_0_0; }

		//right=PowExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//PowExpression
		public RuleCall getRightPowExpressionParserRuleCall_2_1_0() { return cRightPowExpressionParserRuleCall_2_1_0; }
	}

	public class QualifierExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifierExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cQualifierExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpFullStopKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightQualifierExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//QualifierExpression returns Expression:
		//
		//	PrimaryExpression {QualifierExpression.left=current} (=> op="." right=QualifierExpression)?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression {QualifierExpression.left=current} (=> op="." right=QualifierExpression)?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{QualifierExpression.left=current}
		public Action getQualifierExpressionLeftAction_1() { return cQualifierExpressionLeftAction_1; }

		//(=> op="." right=QualifierExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//=> op="."
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"."
		public Keyword getOpFullStopKeyword_2_0_0() { return cOpFullStopKeyword_2_0_0; }

		//right=QualifierExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//QualifierExpression
		public RuleCall getRightQualifierExpressionParserRuleCall_2_1_0() { return cRightQualifierExpressionParserRuleCall_2_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//
		//	UnaryExpression | FunctionCall | ListExpression;
		public ParserRule getRule() { return rule; }

		//UnaryExpression | FunctionCall | ListExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }

		//ListExpression
		public RuleCall getListExpressionParserRuleCall_2() { return cListExpressionParserRuleCall_2; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsExpressionListParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//
		//	function=[spectypes::Function] "(" params=ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//function=[spectypes::Function] "(" params=ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//function=[spectypes::Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//[spectypes::Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }

		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params=ExpressionList?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ExpressionList
		public RuleCall getParamsExpressionListParserRuleCall_2_0() { return cParamsExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ProcedureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcedureProcedureCrossReference_0_0 = (CrossReference)cProcedureAssignment_0.eContents().get(0);
		private final RuleCall cProcedureProcedureIDTerminalRuleCall_0_0_1 = (RuleCall)cProcedureProcedureCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsExpressionListParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcedureCall:
		//
		//	procedure=[spec::Procedure] "(" params=ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//procedure=[spec::Procedure] "(" params=ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//procedure=[spec::Procedure]
		public Assignment getProcedureAssignment_0() { return cProcedureAssignment_0; }

		//[spec::Procedure]
		public CrossReference getProcedureProcedureCrossReference_0_0() { return cProcedureProcedureCrossReference_0_0; }

		//ID
		public RuleCall getProcedureProcedureIDTerminalRuleCall_0_0_1() { return cProcedureProcedureIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params=ExpressionList?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ExpressionList
		public RuleCall getParamsExpressionListParserRuleCall_2_0() { return cParamsExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadExpressionParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailExpressionRestParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//ExpressionList:
		//
		//	head=Expression tail+=ExpressionRest*;
		public ParserRule getRule() { return rule; }

		//head=Expression tail+=ExpressionRest*
		public Group getGroup() { return cGroup; }

		//head=Expression
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Expression
		public RuleCall getHeadExpressionParserRuleCall_0_0() { return cHeadExpressionParserRuleCall_0_0; }

		//tail+=ExpressionRest*
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//ExpressionRest
		public RuleCall getTailExpressionRestParserRuleCall_1_0() { return cTailExpressionRestParserRuleCall_1_0; }
	}

	public class ExpressionRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExpressionRest:
		//
		//	"," Expression;
		public ParserRule getRule() { return rule; }

		//"," Expression
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class ListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cThereIsInAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cTHERE_IS_INKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_0_1_1_0 = (RuleCall)cExprAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cForallInAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFORALL_INKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFirstInAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFIRST_INKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_2_1_1_0 = (RuleCall)cExprAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLastInAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cLAST_INKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExprAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_3_1_1_0 = (RuleCall)cExprAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCountAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCOUNTKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cExprAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_4_1_1_0 = (RuleCall)cExprAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cReduceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cREDUCEKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cExprAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_5_1_1_0 = (RuleCall)cExprAssignment_5_1_1.eContents().get(0);
		private final Keyword cUSINGKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cUsingExprAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cUsingExprExpressionParserRuleCall_5_1_3_0 = (RuleCall)cUsingExprAssignment_5_1_3.eContents().get(0);
		private final Keyword cINITIAL_VALUEKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		private final Assignment cInitValueAssignment_5_1_5 = (Assignment)cGroup_5_1.eContents().get(5);
		private final RuleCall cInitValueExpressionParserRuleCall_5_1_5_0 = (RuleCall)cInitValueAssignment_5_1_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSumAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSUMKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cExprAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_6_1_1_0 = (RuleCall)cExprAssignment_6_1_1.eContents().get(0);
		private final Keyword cUSINGKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Assignment cUsingExprAssignment_6_1_3 = (Assignment)cGroup_6_1.eContents().get(3);
		private final RuleCall cUsingExprExpressionParserRuleCall_6_1_3_0 = (RuleCall)cUsingExprAssignment_6_1_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cMapAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cMAPKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cExprAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cExprListValueParserRuleCall_7_1_1_0 = (RuleCall)cExprAssignment_7_1_1.eContents().get(0);
		private final Keyword cUSINGKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Assignment cUsingExprAssignment_7_1_3 = (Assignment)cGroup_7_1.eContents().get(3);
		private final RuleCall cUsingExprExpressionParserRuleCall_7_1_3_0 = (RuleCall)cUsingExprAssignment_7_1_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cApplyAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cAPPLYKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cApplyExprAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cApplyExprExpressionParserRuleCall_8_1_1_0 = (RuleCall)cApplyExprAssignment_8_1_1.eContents().get(0);
		private final Keyword cONKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Assignment cExprAssignment_8_1_3 = (Assignment)cGroup_8_1.eContents().get(3);
		private final RuleCall cExprListValueParserRuleCall_8_1_3_0 = (RuleCall)cExprAssignment_8_1_3.eContents().get(0);
		
		//ListExpression returns Expression:
		//
		//	{ThereIsIn} ("THERE_IS_IN" expr=ListValue) | {ForallIn} ("FORALL_IN" expr=ListValue) | {FirstIn} ("FIRST_IN"
		//
		//	expr=ListValue) | {LastIn} ("LAST_IN" expr=ListValue) | {Count} ("COUNT" expr=ListValue) | {Reduce} ("REDUCE"
		//
		//	expr=ListValue "USING" usingExpr=Expression "INITIAL_VALUE" initValue=Expression) | {Sum} ("SUM" expr=ListValue
		//
		//	"USING" usingExpr=Expression) | {Map} ("MAP" expr=ListValue "USING" usingExpr=Expression) | {Apply} ("APPLY"
		//
		//	applyExpr=Expression "ON" expr=ListValue);
		public ParserRule getRule() { return rule; }

		//{ThereIsIn} ("THERE_IS_IN" expr=ListValue) | {ForallIn} ("FORALL_IN" expr=ListValue) | {FirstIn} ("FIRST_IN"
		//
		//expr=ListValue) | {LastIn} ("LAST_IN" expr=ListValue) | {Count} ("COUNT" expr=ListValue) | {Reduce} ("REDUCE"
		//
		//expr=ListValue "USING" usingExpr=Expression "INITIAL_VALUE" initValue=Expression) | {Sum} ("SUM" expr=ListValue
		//
		//"USING" usingExpr=Expression) | {Map} ("MAP" expr=ListValue "USING" usingExpr=Expression) | {Apply} ("APPLY"
		//
		//applyExpr=Expression "ON" expr=ListValue)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ThereIsIn} ("THERE_IS_IN" expr=ListValue)
		public Group getGroup_0() { return cGroup_0; }

		//{ThereIsIn}
		public Action getThereIsInAction_0_0() { return cThereIsInAction_0_0; }

		//=> "THERE_IS_IN" expr=ListValue
		public Group getGroup_0_1() { return cGroup_0_1; }

		//=> "THERE_IS_IN"
		public Keyword getTHERE_IS_INKeyword_0_1_0() { return cTHERE_IS_INKeyword_0_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_0_1_1() { return cExprAssignment_0_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_0_1_1_0() { return cExprListValueParserRuleCall_0_1_1_0; }

		//{ForallIn} ("FORALL_IN" expr=ListValue)
		public Group getGroup_1() { return cGroup_1; }

		//{ForallIn}
		public Action getForallInAction_1_0() { return cForallInAction_1_0; }

		//=> "FORALL_IN" expr=ListValue
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> "FORALL_IN"
		public Keyword getFORALL_INKeyword_1_1_0() { return cFORALL_INKeyword_1_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_1_1_1_0() { return cExprListValueParserRuleCall_1_1_1_0; }

		//{FirstIn} ("FIRST_IN" expr=ListValue)
		public Group getGroup_2() { return cGroup_2; }

		//{FirstIn}
		public Action getFirstInAction_2_0() { return cFirstInAction_2_0; }

		//=> "FIRST_IN" expr=ListValue
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> "FIRST_IN"
		public Keyword getFIRST_INKeyword_2_1_0() { return cFIRST_INKeyword_2_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_2_1_1() { return cExprAssignment_2_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_2_1_1_0() { return cExprListValueParserRuleCall_2_1_1_0; }

		//{LastIn} ("LAST_IN" expr=ListValue)
		public Group getGroup_3() { return cGroup_3; }

		//{LastIn}
		public Action getLastInAction_3_0() { return cLastInAction_3_0; }

		//=> "LAST_IN" expr=ListValue
		public Group getGroup_3_1() { return cGroup_3_1; }

		//=> "LAST_IN"
		public Keyword getLAST_INKeyword_3_1_0() { return cLAST_INKeyword_3_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_3_1_1() { return cExprAssignment_3_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_3_1_1_0() { return cExprListValueParserRuleCall_3_1_1_0; }

		//{Count} ("COUNT" expr=ListValue)
		public Group getGroup_4() { return cGroup_4; }

		//{Count}
		public Action getCountAction_4_0() { return cCountAction_4_0; }

		//=> "COUNT" expr=ListValue
		public Group getGroup_4_1() { return cGroup_4_1; }

		//=> "COUNT"
		public Keyword getCOUNTKeyword_4_1_0() { return cCOUNTKeyword_4_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_4_1_1() { return cExprAssignment_4_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_4_1_1_0() { return cExprListValueParserRuleCall_4_1_1_0; }

		//{Reduce} ("REDUCE" expr=ListValue "USING" usingExpr=Expression "INITIAL_VALUE" initValue=Expression)
		public Group getGroup_5() { return cGroup_5; }

		//{Reduce}
		public Action getReduceAction_5_0() { return cReduceAction_5_0; }

		//=> "REDUCE" expr=ListValue "USING" usingExpr=Expression "INITIAL_VALUE" initValue=Expression
		public Group getGroup_5_1() { return cGroup_5_1; }

		//=> "REDUCE"
		public Keyword getREDUCEKeyword_5_1_0() { return cREDUCEKeyword_5_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_5_1_1() { return cExprAssignment_5_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_5_1_1_0() { return cExprListValueParserRuleCall_5_1_1_0; }

		//"USING"
		public Keyword getUSINGKeyword_5_1_2() { return cUSINGKeyword_5_1_2; }

		//usingExpr=Expression
		public Assignment getUsingExprAssignment_5_1_3() { return cUsingExprAssignment_5_1_3; }

		//Expression
		public RuleCall getUsingExprExpressionParserRuleCall_5_1_3_0() { return cUsingExprExpressionParserRuleCall_5_1_3_0; }

		//"INITIAL_VALUE"
		public Keyword getINITIAL_VALUEKeyword_5_1_4() { return cINITIAL_VALUEKeyword_5_1_4; }

		//initValue=Expression
		public Assignment getInitValueAssignment_5_1_5() { return cInitValueAssignment_5_1_5; }

		//Expression
		public RuleCall getInitValueExpressionParserRuleCall_5_1_5_0() { return cInitValueExpressionParserRuleCall_5_1_5_0; }

		//{Sum} ("SUM" expr=ListValue "USING" usingExpr=Expression)
		public Group getGroup_6() { return cGroup_6; }

		//{Sum}
		public Action getSumAction_6_0() { return cSumAction_6_0; }

		//=> "SUM" expr=ListValue "USING" usingExpr=Expression
		public Group getGroup_6_1() { return cGroup_6_1; }

		//=> "SUM"
		public Keyword getSUMKeyword_6_1_0() { return cSUMKeyword_6_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_6_1_1() { return cExprAssignment_6_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_6_1_1_0() { return cExprListValueParserRuleCall_6_1_1_0; }

		//"USING"
		public Keyword getUSINGKeyword_6_1_2() { return cUSINGKeyword_6_1_2; }

		//usingExpr=Expression
		public Assignment getUsingExprAssignment_6_1_3() { return cUsingExprAssignment_6_1_3; }

		//Expression
		public RuleCall getUsingExprExpressionParserRuleCall_6_1_3_0() { return cUsingExprExpressionParserRuleCall_6_1_3_0; }

		//{Map} ("MAP" expr=ListValue "USING" usingExpr=Expression)
		public Group getGroup_7() { return cGroup_7; }

		//{Map}
		public Action getMapAction_7_0() { return cMapAction_7_0; }

		//=> "MAP" expr=ListValue "USING" usingExpr=Expression
		public Group getGroup_7_1() { return cGroup_7_1; }

		//=> "MAP"
		public Keyword getMAPKeyword_7_1_0() { return cMAPKeyword_7_1_0; }

		//expr=ListValue
		public Assignment getExprAssignment_7_1_1() { return cExprAssignment_7_1_1; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_7_1_1_0() { return cExprListValueParserRuleCall_7_1_1_0; }

		//"USING"
		public Keyword getUSINGKeyword_7_1_2() { return cUSINGKeyword_7_1_2; }

		//usingExpr=Expression
		public Assignment getUsingExprAssignment_7_1_3() { return cUsingExprAssignment_7_1_3; }

		//Expression
		public RuleCall getUsingExprExpressionParserRuleCall_7_1_3_0() { return cUsingExprExpressionParserRuleCall_7_1_3_0; }

		//{Apply} ("APPLY" applyExpr=Expression "ON" expr=ListValue)
		public Group getGroup_8() { return cGroup_8; }

		//{Apply}
		public Action getApplyAction_8_0() { return cApplyAction_8_0; }

		//=> "APPLY" applyExpr=Expression "ON" expr=ListValue
		public Group getGroup_8_1() { return cGroup_8_1; }

		//=> "APPLY"
		public Keyword getAPPLYKeyword_8_1_0() { return cAPPLYKeyword_8_1_0; }

		//applyExpr=Expression
		public Assignment getApplyExprAssignment_8_1_1() { return cApplyExprAssignment_8_1_1; }

		//Expression
		public RuleCall getApplyExprExpressionParserRuleCall_8_1_1_0() { return cApplyExprExpressionParserRuleCall_8_1_1_0; }

		//"ON"
		public Keyword getONKeyword_8_1_2() { return cONKeyword_8_1_2; }

		//expr=ListValue
		public Assignment getExprAssignment_8_1_3() { return cExprAssignment_8_1_3; }

		//ListValue
		public RuleCall getExprListValueParserRuleCall_8_1_3_0() { return cExprListValueParserRuleCall_8_1_3_0; }
	}

	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		
		//ListValue returns Expression:
		//
		//	Expression ("|" condition=Condition)?;
		public ParserRule getRule() { return rule; }

		//Expression ("|" condition=Condition)?
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//(=> "|" condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }

		//=> "|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO
		//
		//Condition returns Expression:
		//
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTermParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cStructuredExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStructuredExpressionStructureExpressionParserRuleCall_0_1_0 = (RuleCall)cStructuredExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Action cUnaryExpressionExprAction_1_3 = (Action)cGroup_1.eContents().get(3);
		private final Assignment cStructuredExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStructuredExpressionStructureExpressionParserRuleCall_1_4_0 = (RuleCall)cStructuredExpressionAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNOTKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Action cUnaryExpressionExprAction_2_3 = (Action)cGroup_2.eContents().get(3);
		private final Assignment cStructuredExpressionAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStructuredExpressionStructureExpressionParserRuleCall_2_4_0 = (RuleCall)cStructuredExpressionAssignment_2_4.eContents().get(0);
		
		//UnaryExpression returns Expression:
		//
		//	Term structuredExpression=StructureExpression | "(" Expression ")" {UnaryExpression.expr=current}
		//
		//	structuredExpression=StructureExpression | "NOT (" Expression ")" {UnaryExpression.expr=current}
		//
		//	structuredExpression=StructureExpression;
		public ParserRule getRule() { return rule; }

		//Term structuredExpression=StructureExpression | "(" Expression ")" {UnaryExpression.expr=current}
		//
		//structuredExpression=StructureExpression | "NOT (" Expression ")" {UnaryExpression.expr=current}
		//
		//structuredExpression=StructureExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Term structuredExpression=StructureExpression
		public Group getGroup_0() { return cGroup_0; }

		//Term
		public RuleCall getTermParserRuleCall_0_0() { return cTermParserRuleCall_0_0; }

		//structuredExpression=StructureExpression
		public Assignment getStructuredExpressionAssignment_0_1() { return cStructuredExpressionAssignment_0_1; }

		//StructureExpression
		public RuleCall getStructuredExpressionStructureExpressionParserRuleCall_0_1_0() { return cStructuredExpressionStructureExpressionParserRuleCall_0_1_0; }

		//"(" Expression ")" {UnaryExpression.expr=current} structuredExpression=StructureExpression
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//{UnaryExpression.expr=current}
		public Action getUnaryExpressionExprAction_1_3() { return cUnaryExpressionExprAction_1_3; }

		//structuredExpression=StructureExpression
		public Assignment getStructuredExpressionAssignment_1_4() { return cStructuredExpressionAssignment_1_4; }

		//StructureExpression
		public RuleCall getStructuredExpressionStructureExpressionParserRuleCall_1_4_0() { return cStructuredExpressionStructureExpressionParserRuleCall_1_4_0; }

		//"NOT (" Expression ")" {UnaryExpression.expr=current} structuredExpression=StructureExpression
		public Group getGroup_2() { return cGroup_2; }

		//"NOT ("
		public Keyword getNOTKeyword_2_0() { return cNOTKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//{UnaryExpression.expr=current}
		public Action getUnaryExpressionExprAction_2_3() { return cUnaryExpressionExprAction_2_3; }

		//structuredExpression=StructureExpression
		public Assignment getStructuredExpressionAssignment_2_4() { return cStructuredExpressionAssignment_2_4; }

		//StructureExpression
		public RuleCall getStructuredExpressionStructureExpressionParserRuleCall_2_4_0() { return cStructuredExpressionStructureExpressionParserRuleCall_2_4_0; }
	}

	public class StructureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructureExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyValuePairAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyValuePairKeyValuePairParserRuleCall_1_1_0 = (RuleCall)cKeyValuePairAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStructuredExpressionsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStructuredExpressionsStructureExpressionParserRuleCall_1_3_0 = (RuleCall)cStructuredExpressionsAssignment_1_3.eContents().get(0);
		
		//StructureExpression returns Expression:
		//
		//	{StructureExpression} ("{" keyValuePair=KeyValuePair "}" structuredExpressions+=StructureExpression)?;
		public ParserRule getRule() { return rule; }

		//{StructureExpression} ("{" keyValuePair=KeyValuePair "}" structuredExpressions+=StructureExpression)?
		public Group getGroup() { return cGroup; }

		//{StructureExpression}
		public Action getStructureExpressionAction_0() { return cStructureExpressionAction_0; }

		//("{" keyValuePair=KeyValuePair "}" structuredExpressions+=StructureExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//keyValuePair=KeyValuePair
		public Assignment getKeyValuePairAssignment_1_1() { return cKeyValuePairAssignment_1_1; }

		//KeyValuePair
		public RuleCall getKeyValuePairKeyValuePairParserRuleCall_1_1_0() { return cKeyValuePairKeyValuePairParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }

		//structuredExpressions+=StructureExpression
		public Assignment getStructuredExpressionsAssignment_1_3() { return cStructuredExpressionsAssignment_1_3; }

		//StructureExpression
		public RuleCall getStructuredExpressionsStructureExpressionParserRuleCall_1_3_0() { return cStructuredExpressionsStructureExpressionParserRuleCall_1_3_0; }
	}

	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cRestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRestKeyValuePairRestParserRuleCall_3_0 = (RuleCall)cRestAssignment_3.eContents().get(0);
		
		//KeyValuePair:
		//
		//	key=ID "=>" value=Expression rest+=KeyValuePairRest?;
		public ParserRule getRule() { return rule; }

		//key=ID "=>" value=Expression rest+=KeyValuePairRest?
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }

		//rest+=KeyValuePairRest?
		public Assignment getRestAssignment_3() { return cRestAssignment_3; }

		//KeyValuePairRest
		public RuleCall getRestKeyValuePairRestParserRuleCall_3_0() { return cRestKeyValuePairRestParserRuleCall_3_0; }
	}

	public class KeyValuePairRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyValuePairRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKeyValuePairParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//KeyValuePairRest:
		//
		//	"," KeyValuePair;
		public ParserRule getRule() { return rule; }

		//"," KeyValuePair
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//KeyValuePair
		public RuleCall getKeyValuePairParserRuleCall_1() { return cKeyValuePairParserRuleCall_1; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDesignatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Term:
		//
		//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE | List;
		public ParserRule getRule() { return rule; }

		//Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE | List
		public Alternatives getAlternatives() { return cAlternatives; }

		//Designator
		public RuleCall getDesignatorParserRuleCall_0() { return cDesignatorParserRuleCall_0; }

		//{StringValue} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringValue}
		public Action getStringValueAction_1_0() { return cStringValueAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{IntegerValue} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntegerValue}
		public Action getIntegerValueAction_2_0() { return cIntegerValueAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//{DoubleValue} value=DOUBLE
		public Group getGroup_3() { return cGroup_3; }

		//{DoubleValue}
		public Action getDoubleValueAction_3_0() { return cDoubleValueAction_3_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_3_1_0() { return cValueDOUBLETerminalRuleCall_3_1_0; }

		//List
		public RuleCall getListParserRuleCall_4() { return cListParserRuleCall_4; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermsTermParserRuleCall_2_0 = (RuleCall)cTermsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//
		//	{List} "[" terms+=Term* "]";
		public ParserRule getRule() { return rule; }

		//{List} "[" terms+=Term* "]"
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//terms+=Term*
		public Assignment getTermsAssignment_2() { return cTermsAssignment_2; }

		//Term
		public RuleCall getTermsTermParserRuleCall_2_0() { return cTermsTermParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Designator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEObjectCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_0_1 = (RuleCall)cValueEObjectCrossReference_0.eContents().get(1);
		
		//Designator:
		//
		//	value=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//value=[ecore::EObject]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_0() { return cValueEObjectCrossReference_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_0_1() { return cValueEObjectIDTerminalRuleCall_0_1; }
	}
	
	
	private ModelElements pModel;
	private PhraseElements pPhrase;
	private StatementListElements pStatementList;
	private StatementElements pStatement;
	private AssignmentStatementElements pAssignmentStatement;
	private VariableAssignmentStatementElements pVariableAssignmentStatement;
	private SelfAssignmentStatementElements pSelfAssignmentStatement;
	private ExpressionElements pExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private DashExpressionElements pDashExpression;
	private PointExpressionElements pPointExpression;
	private PowExpressionElements pPowExpression;
	private QualifierExpressionElements pQualifierExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private FunctionCallElements pFunctionCall;
	private ProcedureCallElements pProcedureCall;
	private ExpressionListElements pExpressionList;
	private ExpressionRestElements pExpressionRest;
	private ListExpressionElements pListExpression;
	private ListValueElements pListValue;
	private ConditionElements pCondition;
	private UnaryExpressionElements pUnaryExpression;
	private StructureExpressionElements pStructureExpression;
	private KeyValuePairElements pKeyValuePair;
	private KeyValuePairRestElements pKeyValuePairRest;
	private TermElements pTerm;
	private ListElements pList;
	private TerminalRule tDOUBLE;
	private FQNElements pFQN;
	private DesignatorElements pDesignator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.openetcs.dsl.Expression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	phrase=Phrase;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Phrase:
	//
	//	Expression | StatementList;
	public PhraseElements getPhraseAccess() {
		return (pPhrase != null) ? pPhrase : (pPhrase = new PhraseElements());
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}

	//StatementList:
	//
	//	head=Statement ";" tail=StatementList?;
	public StatementListElements getStatementListAccess() {
		return (pStatementList != null) ? pStatementList : (pStatementList = new StatementListElements());
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}

	////	| ProcedureCall
	//
	//Statement:
	//
	//	AssignmentStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//AssignmentStatement:
	//
	//	VariableAssignmentStatement | SelfAssignmentStatement;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return (pAssignmentStatement != null) ? pAssignmentStatement : (pAssignmentStatement = new AssignmentStatementElements());
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//VariableAssignmentStatement:
	//
	//	designator=Designator "<-" expression=Expression;
	public VariableAssignmentStatementElements getVariableAssignmentStatementAccess() {
		return (pVariableAssignmentStatement != null) ? pVariableAssignmentStatement : (pVariableAssignmentStatement = new VariableAssignmentStatementElements());
	}
	
	public ParserRule getVariableAssignmentStatementRule() {
		return getVariableAssignmentStatementAccess().getRule();
	}

	//SelfAssignmentStatement:
	//
	//	"CurrentState" "<-" expression=Expression;
	public SelfAssignmentStatementElements getSelfAssignmentStatementAccess() {
		return (pSelfAssignmentStatement != null) ? pSelfAssignmentStatement : (pSelfAssignmentStatement = new SelfAssignmentStatementElements());
	}
	
	public ParserRule getSelfAssignmentStatementRule() {
		return getSelfAssignmentStatementAccess().getRule();
	}

	//Expression:
	//
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//
	//	AndExpression {OrExpression.left=current} (=> op="OR" right=OrExpression)?;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//
	//	EqualityExpression {AndExpression.left=current} (=> op="AND" right=AndExpression)?;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//
	//	DashExpression {EqualityExpression.left=current} (=> op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
	//
	//	right=EqualityExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//DashExpression returns Expression:
	//
	//	PointExpression {DashExpression.left=current} (=> op=("+" | "-") right=DashExpression)?;
	public DashExpressionElements getDashExpressionAccess() {
		return (pDashExpression != null) ? pDashExpression : (pDashExpression = new DashExpressionElements());
	}
	
	public ParserRule getDashExpressionRule() {
		return getDashExpressionAccess().getRule();
	}

	//PointExpression returns Expression:
	//
	//	PowExpression {PointExpression.left=current} (=> op=("*" | "/") right=PointExpression)?;
	public PointExpressionElements getPointExpressionAccess() {
		return (pPointExpression != null) ? pPointExpression : (pPointExpression = new PointExpressionElements());
	}
	
	public ParserRule getPointExpressionRule() {
		return getPointExpressionAccess().getRule();
	}

	//PowExpression returns Expression:
	//
	//	QualifierExpression {PowExpression.left=current} (=> op="^" right=PowExpression)?;
	public PowExpressionElements getPowExpressionAccess() {
		return (pPowExpression != null) ? pPowExpression : (pPowExpression = new PowExpressionElements());
	}
	
	public ParserRule getPowExpressionRule() {
		return getPowExpressionAccess().getRule();
	}

	//QualifierExpression returns Expression:
	//
	//	PrimaryExpression {QualifierExpression.left=current} (=> op="." right=QualifierExpression)?;
	public QualifierExpressionElements getQualifierExpressionAccess() {
		return (pQualifierExpression != null) ? pQualifierExpression : (pQualifierExpression = new QualifierExpressionElements());
	}
	
	public ParserRule getQualifierExpressionRule() {
		return getQualifierExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//
	//	UnaryExpression | FunctionCall | ListExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//FunctionCall:
	//
	//	function=[spectypes::Function] "(" params=ExpressionList? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//ProcedureCall:
	//
	//	procedure=[spec::Procedure] "(" params=ExpressionList? ")";
	public ProcedureCallElements getProcedureCallAccess() {
		return (pProcedureCall != null) ? pProcedureCall : (pProcedureCall = new ProcedureCallElements());
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}

	//ExpressionList:
	//
	//	head=Expression tail+=ExpressionRest*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//ExpressionRest:
	//
	//	"," Expression;
	public ExpressionRestElements getExpressionRestAccess() {
		return (pExpressionRest != null) ? pExpressionRest : (pExpressionRest = new ExpressionRestElements());
	}
	
	public ParserRule getExpressionRestRule() {
		return getExpressionRestAccess().getRule();
	}

	//ListExpression returns Expression:
	//
	//	{ThereIsIn} ("THERE_IS_IN" expr=ListValue) | {ForallIn} ("FORALL_IN" expr=ListValue) | {FirstIn} ("FIRST_IN"
	//
	//	expr=ListValue) | {LastIn} ("LAST_IN" expr=ListValue) | {Count} ("COUNT" expr=ListValue) | {Reduce} ("REDUCE"
	//
	//	expr=ListValue "USING" usingExpr=Expression "INITIAL_VALUE" initValue=Expression) | {Sum} ("SUM" expr=ListValue
	//
	//	"USING" usingExpr=Expression) | {Map} ("MAP" expr=ListValue "USING" usingExpr=Expression) | {Apply} ("APPLY"
	//
	//	applyExpr=Expression "ON" expr=ListValue);
	public ListExpressionElements getListExpressionAccess() {
		return (pListExpression != null) ? pListExpression : (pListExpression = new ListExpressionElements());
	}
	
	public ParserRule getListExpressionRule() {
		return getListExpressionAccess().getRule();
	}

	//ListValue returns Expression:
	//
	//	Expression ("|" condition=Condition)?;
	public ListValueElements getListValueAccess() {
		return (pListValue != null) ? pListValue : (pListValue = new ListValueElements());
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}

	//// TODO
	//
	//Condition returns Expression:
	//
	//	Expression;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//
	//	Term structuredExpression=StructureExpression | "(" Expression ")" {UnaryExpression.expr=current}
	//
	//	structuredExpression=StructureExpression | "NOT (" Expression ")" {UnaryExpression.expr=current}
	//
	//	structuredExpression=StructureExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//StructureExpression returns Expression:
	//
	//	{StructureExpression} ("{" keyValuePair=KeyValuePair "}" structuredExpressions+=StructureExpression)?;
	public StructureExpressionElements getStructureExpressionAccess() {
		return (pStructureExpression != null) ? pStructureExpression : (pStructureExpression = new StructureExpressionElements());
	}
	
	public ParserRule getStructureExpressionRule() {
		return getStructureExpressionAccess().getRule();
	}

	//KeyValuePair:
	//
	//	key=ID "=>" value=Expression rest+=KeyValuePairRest?;
	public KeyValuePairElements getKeyValuePairAccess() {
		return (pKeyValuePair != null) ? pKeyValuePair : (pKeyValuePair = new KeyValuePairElements());
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}

	//KeyValuePairRest:
	//
	//	"," KeyValuePair;
	public KeyValuePairRestElements getKeyValuePairRestAccess() {
		return (pKeyValuePairRest != null) ? pKeyValuePairRest : (pKeyValuePairRest = new KeyValuePairRestElements());
	}
	
	public ParserRule getKeyValuePairRestRule() {
		return getKeyValuePairRestAccess().getRule();
	}

	//Term:
	//
	//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE | List;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//List:
	//
	//	{List} "[" terms+=Term* "]";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//FQN:
	//
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Designator:
	//
	//	value=[ecore::EObject];
	public DesignatorElements getDesignatorAccess() {
		return (pDesignator != null) ? pDesignator : (pDesignator = new DesignatorElements());
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
