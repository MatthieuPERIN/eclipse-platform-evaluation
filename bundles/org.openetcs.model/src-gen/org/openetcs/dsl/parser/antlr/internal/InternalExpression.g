/*
* generated by Xtext
*/
grammar InternalExpression;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.openetcs.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openetcs.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.openetcs.dsl.services.ExpressionGrammarAccess;

}

@parser::members {

 	private ExpressionGrammarAccess grammarAccess;
 	
    public InternalExpressionParser(TokenStream input, ExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPhrasePhraseParserRuleCall_0()); 
	    }
		lv_phrase_0_0=rulePhrase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"phrase",
        		lv_phrase_0_0, 
        		"Phrase");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePhrase
entryRulePhrase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPhraseRule()); }
	 iv_rulePhrase=rulePhrase 
	 { $current=$iv_rulePhrase.current; } 
	 EOF 
;

// Rule Phrase
rulePhrase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPhraseAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPhraseAccess().getStatementListParserRuleCall_1()); 
    }
    this_StatementList_1=ruleStatementList
    { 
        $current = $this_StatementList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	 iv_ruleStatementList=ruleStatementList 
	 { $current=$iv_ruleStatementList.current; } 
	 EOF 
;

// Rule StatementList
ruleStatementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getHeadStatementParserRuleCall_0_0()); 
	    }
		lv_head_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementListAccess().getSemicolonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getTailStatementListParserRuleCall_2_0()); 
	    }
		lv_tail_2_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		set(
       			$current, 
       			"tail",
        		lv_tail_2_0, 
        		"StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall()); 
    }
    this_AssignmentStatement_0=ruleAssignmentStatement
    { 
        $current = $this_AssignmentStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	 iv_ruleAssignmentStatement=ruleAssignmentStatement 
	 { $current=$iv_ruleAssignmentStatement.current; } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getVariableAssignmentStatementParserRuleCall_0()); 
    }
    this_VariableAssignmentStatement_0=ruleVariableAssignmentStatement
    { 
        $current = $this_VariableAssignmentStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getSelfAssignmentStatementParserRuleCall_1()); 
    }
    this_SelfAssignmentStatement_1=ruleSelfAssignmentStatement
    { 
        $current = $this_SelfAssignmentStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableAssignmentStatement
entryRuleVariableAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentStatementRule()); }
	 iv_ruleVariableAssignmentStatement=ruleVariableAssignmentStatement 
	 { $current=$iv_ruleVariableAssignmentStatement.current; } 
	 EOF 
;

// Rule VariableAssignmentStatement
ruleVariableAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentStatementAccess().getDesignatorDesignatorParserRuleCall_0_0()); 
	    }
		lv_designator_0_0=ruleDesignator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"designator",
        		lv_designator_0_0, 
        		"Designator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAssignmentStatementAccess().getLessThanSignHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelfAssignmentStatement
entryRuleSelfAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelfAssignmentStatementRule()); }
	 iv_ruleSelfAssignmentStatement=ruleSelfAssignmentStatement 
	 { $current=$iv_ruleSelfAssignmentStatement.current; } 
	 EOF 
;

// Rule SelfAssignmentStatement
ruleSelfAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CurrentState' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelfAssignmentStatementAccess().getCurrentStateKeyword_0());
    }
	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfAssignmentStatementAccess().getLessThanSignHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelfAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelfAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1(),
            $current);
    }
)(((
(
	'OR' 
 

)
)=>
(
		lv_op_2_0=	'OR' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightOrExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1(),
            $current);
    }
)(((
(
	'AND' 
 

)
)=>
(
		lv_op_2_0=	'AND' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "AND");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightAndExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getDashExpressionParserRuleCall_0()); 
    }
    this_DashExpression_0=ruleDashExpression
    { 
        $current = $this_DashExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1(),
            $current);
    }
)(((
(
(
	'==' 
 

    |			'!=' 
 

    |			'<=' 
 

    |			'>=' 
 

    |			'in' 
 

    |			'not in' 
 

)

)
)=>
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'<=' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getEqualityExpressionAccess().getOpLessThanSignEqualsSignKeyword_2_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getEqualityExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_2_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'in' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getEqualityExpressionAccess().getOpInKeyword_2_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'not in' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getEqualityExpressionAccess().getOpNotInKeyword_2_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDashExpression
entryRuleDashExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDashExpressionRule()); }
	 iv_ruleDashExpression=ruleDashExpression 
	 { $current=$iv_ruleDashExpression.current; } 
	 EOF 
;

// Rule DashExpression
ruleDashExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDashExpressionAccess().getPointExpressionParserRuleCall_0()); 
    }
    this_PointExpression_0=rulePointExpression
    { 
        $current = $this_PointExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDashExpressionAccess().getDashExpressionLeftAction_1(),
            $current);
    }
)(((
(
(
	'+' 
 

    |			'-' 
 

)

)
)=>
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getDashExpressionAccess().getOpPlusSignKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDashExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getDashExpressionAccess().getOpHyphenMinusKeyword_2_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDashExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDashExpressionAccess().getRightDashExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleDashExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"DashExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePointExpression
entryRulePointExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointExpressionRule()); }
	 iv_rulePointExpression=rulePointExpression 
	 { $current=$iv_rulePointExpression.current; } 
	 EOF 
;

// Rule PointExpression
rulePointExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPointExpressionAccess().getPowExpressionParserRuleCall_0()); 
    }
    this_PowExpression_0=rulePowExpression
    { 
        $current = $this_PowExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPointExpressionAccess().getPointExpressionLeftAction_1(),
            $current);
    }
)(((
(
(
	'*' 
 

    |			'/' 
 

)

)
)=>
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPointExpressionAccess().getOpAsteriskKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPointExpressionAccess().getOpSolidusKeyword_2_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPointExpressionAccess().getRightPointExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=rulePointExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PointExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePowExpression
entryRulePowExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowExpressionRule()); }
	 iv_rulePowExpression=rulePowExpression 
	 { $current=$iv_rulePowExpression.current; } 
	 EOF 
;

// Rule PowExpression
rulePowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowExpressionAccess().getQualifierExpressionParserRuleCall_0()); 
    }
    this_QualifierExpression_0=ruleQualifierExpression
    { 
        $current = $this_QualifierExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowExpressionAccess().getPowExpressionLeftAction_1(),
            $current);
    }
)(((
(
	'^' 
 

)
)=>
(
		lv_op_2_0=	'^' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPowExpressionAccess().getOpCircumflexAccentKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowExpressionAccess().getRightPowExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=rulePowExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PowExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleQualifierExpression
entryRuleQualifierExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifierExpressionRule()); }
	 iv_ruleQualifierExpression=ruleQualifierExpression 
	 { $current=$iv_ruleQualifierExpression.current; } 
	 EOF 
;

// Rule QualifierExpression
ruleQualifierExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifierExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getQualifierExpressionAccess().getQualifierExpressionLeftAction_1(),
            $current);
    }
)(((
(
	'.' 
 

)
)=>
(
		lv_op_2_0=	'.' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getQualifierExpressionAccess().getOpFullStopKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifierExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifierExpressionAccess().getRightQualifierExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleQualifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifierExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"QualifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_1()); 
    }
    this_FunctionCall_1=ruleFunctionCall
    { 
        $current = $this_FunctionCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getListExpressionParserRuleCall_2()); 
    }
    this_ListExpression_2=ruleListExpression
    { 
        $current = $this_ListExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getDesignatorParserRuleCall_0()); 
    }
    this_Designator_0=ruleDesignator
    { 
        $current = $this_Designator_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParamsExpressionListParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getHeadExpressionParserRuleCall_0_0()); 
	    }
		lv_head_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getTailExpressionRestParserRuleCall_1_0()); 
	    }
		lv_tail_1_0=ruleExpressionRest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"tail",
        		lv_tail_1_0, 
        		"ExpressionRest");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExpressionRest
entryRuleExpressionRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRestRule()); }
	 iv_ruleExpressionRest=ruleExpressionRest 
	 { $current=$iv_ruleExpressionRest.current; } 
	 EOF 
;

// Rule ExpressionRest
ruleExpressionRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=',' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionRestAccess().getCommaKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExpressionRestAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleListExpression
entryRuleListExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListExpressionRule()); }
	 iv_ruleListExpression=ruleListExpression 
	 { $current=$iv_ruleListExpression.current; } 
	 EOF 
;

// Rule ListExpression
ruleListExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getThereIsInAction_0_0(),
            $current);
    }
)(((	'THERE_IS_IN' 
)=>	otherlv_1='THERE_IS_IN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListExpressionAccess().getTHERE_IS_INKeyword_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_0_1_1_0()); 
	    }
		lv_expr_2_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getForallInAction_1_0(),
            $current);
    }
)(((	'FORALL_IN' 
)=>	otherlv_4='FORALL_IN' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListExpressionAccess().getFORALL_INKeyword_1_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_1_1_1_0()); 
	    }
		lv_expr_5_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getFirstInAction_2_0(),
            $current);
    }
)(((	'FIRST_IN' 
)=>	otherlv_7='FIRST_IN' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getListExpressionAccess().getFIRST_INKeyword_2_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_2_1_1_0()); 
	    }
		lv_expr_8_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getLastInAction_3_0(),
            $current);
    }
)(((	'LAST_IN' 
)=>	otherlv_10='LAST_IN' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getListExpressionAccess().getLAST_INKeyword_3_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_3_1_1_0()); 
	    }
		lv_expr_11_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_11_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getCountAction_4_0(),
            $current);
    }
)(((	'COUNT' 
)=>	otherlv_13='COUNT' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getListExpressionAccess().getCOUNTKeyword_4_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_4_1_1_0()); 
	    }
		lv_expr_14_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_14_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getReduceAction_5_0(),
            $current);
    }
)(((	'REDUCE' 
)=>	otherlv_16='REDUCE' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getListExpressionAccess().getREDUCEKeyword_5_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_5_1_1_0()); 
	    }
		lv_expr_17_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_17_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18='USING' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getListExpressionAccess().getUSINGKeyword_5_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getUsingExprExpressionParserRuleCall_5_1_3_0()); 
	    }
		lv_usingExpr_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"usingExpr",
        		lv_usingExpr_19_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20='INITIAL_VALUE' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getListExpressionAccess().getINITIAL_VALUEKeyword_5_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getInitValueExpressionParserRuleCall_5_1_5_0()); 
	    }
		lv_initValue_21_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"initValue",
        		lv_initValue_21_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getSumAction_6_0(),
            $current);
    }
)(((	'SUM' 
)=>	otherlv_23='SUM' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getListExpressionAccess().getSUMKeyword_6_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_6_1_1_0()); 
	    }
		lv_expr_24_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_24_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_25='USING' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getListExpressionAccess().getUSINGKeyword_6_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getUsingExprExpressionParserRuleCall_6_1_3_0()); 
	    }
		lv_usingExpr_26_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"usingExpr",
        		lv_usingExpr_26_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getMapAction_7_0(),
            $current);
    }
)(((	'MAP' 
)=>	otherlv_28='MAP' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getListExpressionAccess().getMAPKeyword_7_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_7_1_1_0()); 
	    }
		lv_expr_29_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_29_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_30='USING' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getListExpressionAccess().getUSINGKeyword_7_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getUsingExprExpressionParserRuleCall_7_1_3_0()); 
	    }
		lv_usingExpr_31_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"usingExpr",
        		lv_usingExpr_31_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListExpressionAccess().getApplyAction_8_0(),
            $current);
    }
)(((	'APPLY' 
)=>	otherlv_33='APPLY' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getListExpressionAccess().getAPPLYKeyword_8_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getApplyExprExpressionParserRuleCall_8_1_1_0()); 
	    }
		lv_applyExpr_34_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"applyExpr",
        		lv_applyExpr_34_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_35='ON' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getListExpressionAccess().getONKeyword_8_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListExpressionAccess().getExprListValueParserRuleCall_8_1_3_0()); 
	    }
		lv_expr_36_0=ruleListValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_36_0, 
        		"ListValue");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleListValue
entryRuleListValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListValueRule()); }
	 iv_ruleListValue=ruleListValue 
	 { $current=$iv_ruleListValue.current; } 
	 EOF 
;

// Rule ListValue
ruleListValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getListValueAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((	'|' 
)=>	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListValueAccess().getVerticalLineKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListValueAccess().getConditionConditionParserRuleCall_1_1_0()); 
	    }
		lv_condition_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListValueRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getTermParserRuleCall_0_0()); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getStructuredExpressionStructureExpressionParserRuleCall_0_1_0()); 
	    }
		lv_structuredExpression_1_0=ruleStructureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"structuredExpression",
        		lv_structuredExpression_1_0, 
        		"StructureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getRightParenthesisKeyword_1_2());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionExprAction_1_3(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getStructuredExpressionStructureExpressionParserRuleCall_1_4_0()); 
	    }
		lv_structuredExpression_6_0=ruleStructureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"structuredExpression",
        		lv_structuredExpression_6_0, 
        		"StructureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='NOT (' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnaryExpressionAccess().getNOTKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_8=ruleExpression
    { 
        $current = $this_Expression_8.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnaryExpressionAccess().getRightParenthesisKeyword_2_2());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionExprAction_2_3(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getStructuredExpressionStructureExpressionParserRuleCall_2_4_0()); 
	    }
		lv_structuredExpression_11_0=ruleStructureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"structuredExpression",
        		lv_structuredExpression_11_0, 
        		"StructureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleStructureExpression
entryRuleStructureExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureExpressionRule()); }
	 iv_ruleStructureExpression=ruleStructureExpression 
	 { $current=$iv_ruleStructureExpression.current; } 
	 EOF 
;

// Rule StructureExpression
ruleStructureExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructureExpressionAccess().getStructureExpressionAction_0(),
            $current);
    }
)(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureExpressionAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureExpressionAccess().getKeyValuePairKeyValuePairParserRuleCall_1_1_0()); 
	    }
		lv_keyValuePair_2_0=ruleKeyValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureExpressionRule());
	        }
       		set(
       			$current, 
       			"keyValuePair",
        		lv_keyValuePair_2_0, 
        		"KeyValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructureExpressionAccess().getRightCurlyBracketKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureExpressionAccess().getStructuredExpressionsStructureExpressionParserRuleCall_1_3_0()); 
	    }
		lv_structuredExpressions_4_0=ruleStructureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureExpressionRule());
	        }
       		add(
       			$current, 
       			"structuredExpressions",
        		lv_structuredExpressions_4_0, 
        		"StructureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleKeyValuePair
entryRuleKeyValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyValuePairRule()); }
	 iv_ruleKeyValuePair=ruleKeyValuePair 
	 { $current=$iv_ruleKeyValuePair.current; } 
	 EOF 
;

// Rule KeyValuePair
ruleKeyValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getKeyValuePairAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKeyValuePairAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyValuePairAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyValuePairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyValuePairAccess().getRestKeyValuePairRestParserRuleCall_3_0()); 
	    }
		lv_rest_3_0=ruleKeyValuePairRest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyValuePairRule());
	        }
       		add(
       			$current, 
       			"rest",
        		lv_rest_3_0, 
        		"KeyValuePairRest");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleKeyValuePairRest
entryRuleKeyValuePairRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyValuePairRestRule()); }
	 iv_ruleKeyValuePairRest=ruleKeyValuePairRest 
	 { $current=$iv_ruleKeyValuePairRest.current; } 
	 EOF 
;

// Rule KeyValuePairRest
ruleKeyValuePairRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=',' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyValuePairRestAccess().getCommaKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getKeyValuePairRestAccess().getKeyValuePairParserRuleCall_1()); 
    }
    this_KeyValuePair_1=ruleKeyValuePair
    { 
        $current = $this_KeyValuePair_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getDesignatorParserRuleCall_0()); 
    }
    this_Designator_0=ruleDesignator
    { 
        $current = $this_Designator_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermAccess().getStringValueAction_1_0(),
            $current);
    }
)(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getTermAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermAccess().getIntegerValueAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getTermAccess().getValueINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermAccess().getDoubleValueAction_3_0(),
            $current);
    }
)(
(
		lv_value_6_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_6_0, grammarAccess.getTermAccess().getValueDOUBLETerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"DOUBLE");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTermAccess().getListParserRuleCall_4()); 
    }
    this_List_7=ruleList
    { 
        $current = $this_List_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListAccess().getListAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getTermsTermParserRuleCall_2_0()); 
	    }
		lv_terms_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListAccess().getRightSquareBracketKeyword_3());
    }
)
;







// Entry rule entryRuleDesignator
entryRuleDesignator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDesignatorRule()); }
	 iv_ruleDesignator=ruleDesignator 
	 { $current=$iv_ruleDesignator.current; } 
	 EOF 
;

// Rule Designator
ruleDesignator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDesignatorRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDesignatorAccess().getValueEObjectCrossReference_0()); 
	}

)
)
;





RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


