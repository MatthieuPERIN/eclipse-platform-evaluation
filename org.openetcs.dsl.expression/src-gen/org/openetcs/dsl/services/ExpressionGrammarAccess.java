/*
* generated by Xtext
*/

package org.openetcs.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPhraseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPhrasePhraseParserRuleCall_0 = (RuleCall)cPhraseAssignment.eContents().get(0);
		
		//Model:
		//
		//	phrase=Phrase;
		public ParserRule getRule() { return rule; }

		//phrase=Phrase
		public Assignment getPhraseAssignment() { return cPhraseAssignment; }

		//Phrase
		public RuleCall getPhrasePhraseParserRuleCall_0() { return cPhrasePhraseParserRuleCall_0; }
	}

	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phrase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Phrase:
		//
		//	Expression | Statement;
		public ParserRule getRule() { return rule; }

		//Expression | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cEvaluationExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//
		//	EvaluationExpression;
		public ParserRule getRule() { return rule; }

		//EvaluationExpression
		public RuleCall getEvaluationExpressionParserRuleCall() { return cEvaluationExpressionParserRuleCall; }
	}

	public class EvaluationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EvaluationExpression returns Expression:
		//
		//	OrExpression;
		public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//
		//	SingleStatement | SelfStatement | MultiStatement;
		public ParserRule getRule() { return rule; }

		//SingleStatement | SelfStatement | MultiStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleStatement
		public RuleCall getSingleStatementParserRuleCall_0() { return cSingleStatementParserRuleCall_0; }

		//SelfStatement
		public RuleCall getSelfStatementParserRuleCall_1() { return cSelfStatementParserRuleCall_1; }

		//MultiStatement
		public RuleCall getMultiStatementParserRuleCall_2() { return cMultiStatementParserRuleCall_2; }
	}

	public class SingleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesgnatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesgnatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesgnatorAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SingleStatement:
		//
		//	desgnator=Designator "<-" expression=Expression;
		public ParserRule getRule() { return rule; }

		//desgnator=Designator "<-" expression=Expression
		public Group getGroup() { return cGroup; }

		//desgnator=Designator
		public Assignment getDesgnatorAssignment_0() { return cDesgnatorAssignment_0; }

		//Designator
		public RuleCall getDesgnatorDesignatorParserRuleCall_0_0() { return cDesgnatorDesignatorParserRuleCall_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SelfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrentStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SelfStatement:
		//
		//	"CurrentState" "<-" expression=Expression;
		public ParserRule getRule() { return rule; }

		//"CurrentState" "<-" expression=Expression
		public Group getGroup() { return cGroup; }

		//"CurrentState"
		public Keyword getCurrentStateKeyword_0() { return cCurrentStateKeyword_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class MultiStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesgnatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesgnatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesgnatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MultiStatement:
		//
		//	desgnator=Designator "(" expressions+=Expression* ")";
		public ParserRule getRule() { return rule; }

		//desgnator=Designator "(" expressions+=Expression* ")"
		public Group getGroup() { return cGroup; }

		//desgnator=Designator
		public Assignment getDesgnatorAssignment_0() { return cDesgnatorAssignment_0; }

		//Designator
		public RuleCall getDesgnatorDesignatorParserRuleCall_0_0() { return cDesgnatorDesignatorParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpORKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//
		//	AndExpression ({OrExpression.left=current} op="OR" right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.left=current} op="OR" right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.left=current} op="OR" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }

		//op="OR"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"OR"
		public Keyword getOpORKeyword_1_1_0() { return cOpORKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpANDKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//
		//	EqualityExpression ({AndExpression.left=current} op="AND" right=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//EqualityExpression ({AndExpression.left=current} op="AND" right=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//({AndExpression.left=current} op="AND" right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }

		//op="AND"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"AND"
		public Keyword getOpANDKeyword_1_1_0() { return cOpANDKeyword_1_1_0; }

		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDashOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpInKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpNotInKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDashOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//
		//	DashOperation ({EqualityExpression.left=current} op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
		//
		//	right=DashOperation)*;
		public ParserRule getRule() { return rule; }

		//DashOperation ({EqualityExpression.left=current} op=("==" | "!=" | "<=" | ">=" | "in" | "not in") right=DashOperation)*
		public Group getGroup() { return cGroup; }

		//DashOperation
		public RuleCall getDashOperationParserRuleCall_0() { return cDashOperationParserRuleCall_0; }

		//({EqualityExpression.left=current} op=("==" | "!=" | "<=" | ">=" | "in" | "not in") right=DashOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }

		//op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!=" | "<=" | ">=" | "in" | "not in"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//"in"
		public Keyword getOpInKeyword_1_1_0_4() { return cOpInKeyword_1_1_0_4; }

		//"not in"
		public Keyword getOpNotInKeyword_1_1_0_5() { return cOpNotInKeyword_1_1_0_5; }

		//right=DashOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//DashOperation
		public RuleCall getRightDashOperationParserRuleCall_1_2_0() { return cRightDashOperationParserRuleCall_1_2_0; }
	}

	public class DashOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DashOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPointOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDashOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPointOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//DashOperation returns Expression:
		//
		//	PointOperation ({DashOperation.left=current} op=("+" | "-") right=PointOperation)*;
		public ParserRule getRule() { return rule; }

		//PointOperation ({DashOperation.left=current} op=("+" | "-") right=PointOperation)*
		public Group getGroup() { return cGroup; }

		//PointOperation
		public RuleCall getPointOperationParserRuleCall_0() { return cPointOperationParserRuleCall_0; }

		//({DashOperation.left=current} op=("+" | "-") right=PointOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{DashOperation.left=current}
		public Action getDashOperationLeftAction_1_0() { return cDashOperationLeftAction_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=PointOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PointOperation
		public RuleCall getRightPointOperationParserRuleCall_1_2_0() { return cRightPointOperationParserRuleCall_1_2_0; }
	}

	public class PointOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPointOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PointOperation returns Expression:
		//
		//	PowOperation ({PointOperation.left=current} op=("*" | "/") right=PowOperation)*;
		public ParserRule getRule() { return rule; }

		//PowOperation ({PointOperation.left=current} op=("*" | "/") right=PowOperation)*
		public Group getGroup() { return cGroup; }

		//PowOperation
		public RuleCall getPowOperationParserRuleCall_0() { return cPowOperationParserRuleCall_0; }

		//({PointOperation.left=current} op=("*" | "/") right=PowOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{PointOperation.left=current}
		public Action getPointOperationLeftAction_1_0() { return cPointOperationLeftAction_1_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//right=PowOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PowOperation
		public RuleCall getRightPowOperationParserRuleCall_1_2_0() { return cRightPowOperationParserRuleCall_1_2_0; }
	}

	public class PowOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowOperation returns Expression:
		//
		//	PrimaryExpression ({PowOperation.left=current} op="^" right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({PowOperation.left=current} op="^" right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({PowOperation.left=current} op="^" right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{PowOperation.left=current}
		public Action getPowOperationLeftAction_1_0() { return cPowOperationLeftAction_1_0; }

		//op="^"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0() { return cOpCircumflexAccentKeyword_1_1_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEvaluationExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNOTKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cEvaluationExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////|'('EvaluationExpression')'|'NOT ('EvaluationExpression')'
		//
		//PrimaryExpression returns Expression:
		//
		//	UnaryExpression | "(" EvaluationExpression ")" | "NOT (" EvaluationExpression ")";
		public ParserRule getRule() { return rule; }

		//UnaryExpression | "(" EvaluationExpression ")" | "NOT (" EvaluationExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//"(" EvaluationExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//EvaluationExpression
		public RuleCall getEvaluationExpressionParserRuleCall_1_1() { return cEvaluationExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"NOT (" EvaluationExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"NOT ("
		public Keyword getNOTKeyword_2_0() { return cNOTKeyword_2_0; }

		//EvaluationExpression
		public RuleCall getEvaluationExpressionParserRuleCall_2_1() { return cEvaluationExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnaryExpression:
		//
		//	Term;
		public ParserRule getRule() { return rule; }

		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDesignatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Term:
		//
		//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }

		//Designator
		public RuleCall getDesignatorParserRuleCall_0() { return cDesignatorParserRuleCall_0; }

		//{StringValue} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringValue}
		public Action getStringValueAction_1_0() { return cStringValueAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{IntegerValue} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntegerValue}
		public Action getIntegerValueAction_2_0() { return cIntegerValueAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//{DoubleValue} value=DOUBLE
		public Group getGroup_3() { return cGroup_3; }

		//{DoubleValue}
		public Action getDoubleValueAction_3_0() { return cDoubleValueAction_3_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_3_1_0() { return cValueDOUBLETerminalRuleCall_3_1_0; }
	}

	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Designator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEObjectCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_0_1 = (RuleCall)cValueEObjectCrossReference_0.eContents().get(1);
		
		//Designator:
		//
		//	value=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//value=[ecore::EObject]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_0() { return cValueEObjectCrossReference_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_0_1() { return cValueEObjectIDTerminalRuleCall_0_1; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tDOUBLE;
	private PhraseElements pPhrase;
	private ExpressionElements pExpression;
	private EvaluationExpressionElements pEvaluationExpression;
	private StatementElements pStatement;
	private SingleStatementElements pSingleStatement;
	private SelfStatementElements pSelfStatement;
	private MultiStatementElements pMultiStatement;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private DashOperationElements pDashOperation;
	private PointOperationElements pPointOperation;
	private PowOperationElements pPowOperation;
	private PrimaryExpressionElements pPrimaryExpression;
	private UnaryExpressionElements pUnaryExpression;
	private TermElements pTerm;
	private DesignatorElements pDesignator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.openetcs.dsl.Expression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	phrase=Phrase;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//Phrase:
	//
	//	Expression | Statement;
	public PhraseElements getPhraseAccess() {
		return (pPhrase != null) ? pPhrase : (pPhrase = new PhraseElements());
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}

	//Expression:
	//
	//	EvaluationExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//EvaluationExpression returns Expression:
	//
	//	OrExpression;
	public EvaluationExpressionElements getEvaluationExpressionAccess() {
		return (pEvaluationExpression != null) ? pEvaluationExpression : (pEvaluationExpression = new EvaluationExpressionElements());
	}
	
	public ParserRule getEvaluationExpressionRule() {
		return getEvaluationExpressionAccess().getRule();
	}

	//Statement:
	//
	//	SingleStatement | SelfStatement | MultiStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SingleStatement:
	//
	//	desgnator=Designator "<-" expression=Expression;
	public SingleStatementElements getSingleStatementAccess() {
		return (pSingleStatement != null) ? pSingleStatement : (pSingleStatement = new SingleStatementElements());
	}
	
	public ParserRule getSingleStatementRule() {
		return getSingleStatementAccess().getRule();
	}

	//SelfStatement:
	//
	//	"CurrentState" "<-" expression=Expression;
	public SelfStatementElements getSelfStatementAccess() {
		return (pSelfStatement != null) ? pSelfStatement : (pSelfStatement = new SelfStatementElements());
	}
	
	public ParserRule getSelfStatementRule() {
		return getSelfStatementAccess().getRule();
	}

	//MultiStatement:
	//
	//	desgnator=Designator "(" expressions+=Expression* ")";
	public MultiStatementElements getMultiStatementAccess() {
		return (pMultiStatement != null) ? pMultiStatement : (pMultiStatement = new MultiStatementElements());
	}
	
	public ParserRule getMultiStatementRule() {
		return getMultiStatementAccess().getRule();
	}

	//OrExpression returns Expression:
	//
	//	AndExpression ({OrExpression.left=current} op="OR" right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//
	//	EqualityExpression ({AndExpression.left=current} op="AND" right=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//
	//	DashOperation ({EqualityExpression.left=current} op=("==" | "!=" | "<=" | ">=" | "in" | "not in")
	//
	//	right=DashOperation)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//DashOperation returns Expression:
	//
	//	PointOperation ({DashOperation.left=current} op=("+" | "-") right=PointOperation)*;
	public DashOperationElements getDashOperationAccess() {
		return (pDashOperation != null) ? pDashOperation : (pDashOperation = new DashOperationElements());
	}
	
	public ParserRule getDashOperationRule() {
		return getDashOperationAccess().getRule();
	}

	//PointOperation returns Expression:
	//
	//	PowOperation ({PointOperation.left=current} op=("*" | "/") right=PowOperation)*;
	public PointOperationElements getPointOperationAccess() {
		return (pPointOperation != null) ? pPointOperation : (pPointOperation = new PointOperationElements());
	}
	
	public ParserRule getPointOperationRule() {
		return getPointOperationAccess().getRule();
	}

	//PowOperation returns Expression:
	//
	//	PrimaryExpression ({PowOperation.left=current} op="^" right=PrimaryExpression)*;
	public PowOperationElements getPowOperationAccess() {
		return (pPowOperation != null) ? pPowOperation : (pPowOperation = new PowOperationElements());
	}
	
	public ParserRule getPowOperationRule() {
		return getPowOperationAccess().getRule();
	}

	////|'('EvaluationExpression')'|'NOT ('EvaluationExpression')'
	//
	//PrimaryExpression returns Expression:
	//
	//	UnaryExpression | "(" EvaluationExpression ")" | "NOT (" EvaluationExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//UnaryExpression:
	//
	//	Term;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//Term:
	//
	//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Designator:
	//
	//	value=[ecore::EObject];
	public DesignatorElements getDesignatorAccess() {
		return (pDesignator != null) ? pDesignator : (pDesignator = new DesignatorElements());
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
