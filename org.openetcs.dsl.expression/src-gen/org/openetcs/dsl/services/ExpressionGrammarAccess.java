/*
* generated by Xtext
*/

package org.openetcs.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Model:
		//
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftAndParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cORKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightAndParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//Or returns Expression:
		//
		//	{Or} left=And ("OR" right=And)?;
		public ParserRule getRule() { return rule; }

		//{Or} left=And ("OR" right=And)?
		public Group getGroup() { return cGroup; }

		//{Or}
		public Action getOrAction_0() { return cOrAction_0; }

		//left=And
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//And
		public RuleCall getLeftAndParserRuleCall_1_0() { return cLeftAndParserRuleCall_1_0; }

		//("OR" right=And)?
		public Group getGroup_2() { return cGroup_2; }

		//"OR"
		public Keyword getORKeyword_2_0() { return cORKeyword_2_0; }

		//right=And
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//And
		public RuleCall getRightAndParserRuleCall_2_1_0() { return cRightAndParserRuleCall_2_1_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftEqualityParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cANDKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightEqualityParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//And returns Expression:
		//
		//	{And} left=Equality ("AND" right=Equality)?;
		public ParserRule getRule() { return rule; }

		//{And} left=Equality ("AND" right=Equality)?
		public Group getGroup() { return cGroup; }

		//{And}
		public Action getAndAction_0() { return cAndAction_0; }

		//left=Equality
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//Equality
		public RuleCall getLeftEqualityParserRuleCall_1_0() { return cLeftEqualityParserRuleCall_1_0; }

		//("AND" right=Equality)?
		public Group getGroup_2() { return cGroup_2; }

		//"AND"
		public Keyword getANDKeyword_2_0() { return cANDKeyword_2_0; }

		//right=Equality
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_2_1_0() { return cRightEqualityParserRuleCall_2_1_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_0_1_0 = (RuleCall)cRightAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRightAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_1_1_0 = (RuleCall)cRightAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRightAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_2_1_0 = (RuleCall)cRightAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cRightAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_3_1_0 = (RuleCall)cRightAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cAlternatives_2.eContents().get(4);
		private final Keyword cNotInKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cRightAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_4_1_0 = (RuleCall)cRightAssignment_2_4_1.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cAlternatives_2.eContents().get(5);
		private final Keyword cInKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cRightAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_2_5_1_0 = (RuleCall)cRightAssignment_2_5_1.eContents().get(0);
		
		//Equality returns Expression:
		//
		//	{Equality} left=PrimaryExpression ("==" right=PrimaryExpression | "!=" right=PrimaryExpression | "<="
		//
		//	right=PrimaryExpression | ">=" right=PrimaryExpression | "not in" right=PrimaryExpression | "in"
		//
		//	right=PrimaryExpression)?;
		public ParserRule getRule() { return rule; }

		//{Equality} left=PrimaryExpression ("==" right=PrimaryExpression | "!=" right=PrimaryExpression | "<="
		//
		//right=PrimaryExpression | ">=" right=PrimaryExpression | "not in" right=PrimaryExpression | "in"
		//
		//right=PrimaryExpression)?
		public Group getGroup() { return cGroup; }

		//{Equality}
		public Action getEqualityAction_0() { return cEqualityAction_0; }

		//left=PrimaryExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//PrimaryExpression
		public RuleCall getLeftPrimaryExpressionParserRuleCall_1_0() { return cLeftPrimaryExpressionParserRuleCall_1_0; }

		//("==" right=PrimaryExpression | "!=" right=PrimaryExpression | "<=" right=PrimaryExpression | ">="
		//
		//right=PrimaryExpression | "not in" right=PrimaryExpression | "in" right=PrimaryExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"==" right=PrimaryExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2_0_0() { return cEqualsSignEqualsSignKeyword_2_0_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_0_1() { return cRightAssignment_2_0_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_0_1_0() { return cRightPrimaryExpressionParserRuleCall_2_0_1_0; }

		//"!=" right=PrimaryExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_2_1_0() { return cExclamationMarkEqualsSignKeyword_2_1_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_1_1() { return cRightAssignment_2_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_1_1_0() { return cRightPrimaryExpressionParserRuleCall_2_1_1_0; }

		//"<=" right=PrimaryExpression
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2_2_0() { return cLessThanSignEqualsSignKeyword_2_2_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_2_1() { return cRightAssignment_2_2_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_2_1_0() { return cRightPrimaryExpressionParserRuleCall_2_2_1_0; }

		//">=" right=PrimaryExpression
		public Group getGroup_2_3() { return cGroup_2_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2_3_0() { return cGreaterThanSignEqualsSignKeyword_2_3_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_3_1() { return cRightAssignment_2_3_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_3_1_0() { return cRightPrimaryExpressionParserRuleCall_2_3_1_0; }

		//"not in" right=PrimaryExpression
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"not in"
		public Keyword getNotInKeyword_2_4_0() { return cNotInKeyword_2_4_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_4_1() { return cRightAssignment_2_4_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_4_1_0() { return cRightPrimaryExpressionParserRuleCall_2_4_1_0; }

		//"in" right=PrimaryExpression
		public Group getGroup_2_5() { return cGroup_2_5; }

		//"in"
		public Keyword getInKeyword_2_5_0() { return cInKeyword_2_5_0; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_2_5_1() { return cRightAssignment_2_5_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_2_5_1_0() { return cRightPrimaryExpressionParserRuleCall_2_5_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final RuleCall cUnaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//
		//	UnaryExpression;
		public ParserRule getRule() { return rule; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall() { return cUnaryExpressionParserRuleCall; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnaryExpression:
		//
		//	Term;
		public ParserRule getRule() { return rule; }

		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDesignatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Term:
		//
		//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }

		//Designator
		public RuleCall getDesignatorParserRuleCall_0() { return cDesignatorParserRuleCall_0; }

		//{StringValue} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringValue}
		public Action getStringValueAction_1_0() { return cStringValueAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{IntegerValue} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntegerValue}
		public Action getIntegerValueAction_2_0() { return cIntegerValueAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//{DoubleValue} value=DOUBLE
		public Group getGroup_3() { return cGroup_3; }

		//{DoubleValue}
		public Action getDoubleValueAction_3_0() { return cDoubleValueAction_3_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_3_1_0() { return cValueDOUBLETerminalRuleCall_3_1_0; }
	}

	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Designator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEObjectCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_0_1 = (RuleCall)cValueEObjectCrossReference_0.eContents().get(1);
		
		//Designator:
		//
		//	value=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//value=[ecore::EObject]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_0() { return cValueEObjectCrossReference_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_0_1() { return cValueEObjectIDTerminalRuleCall_0_1; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tDOUBLE;
	private ExpressionElements pExpression;
	private OrElements pOr;
	private AndElements pAnd;
	private EqualityElements pEquality;
	private PrimaryExpressionElements pPrimaryExpression;
	private UnaryExpressionElements pUnaryExpression;
	private TermElements pTerm;
	private DesignatorElements pDesignator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.openetcs.dsl.Expression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	expression=Expression;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal DOUBLE:
	//
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//Expression:
	//
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression:
	//
	//	{Or} left=And ("OR" right=And)?;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//
	//	{And} left=Equality ("AND" right=Equality)?;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Equality returns Expression:
	//
	//	{Equality} left=PrimaryExpression ("==" right=PrimaryExpression | "!=" right=PrimaryExpression | "<="
	//
	//	right=PrimaryExpression | ">=" right=PrimaryExpression | "not in" right=PrimaryExpression | "in"
	//
	//	right=PrimaryExpression)?;
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//
	//	UnaryExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//UnaryExpression:
	//
	//	Term;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//Term:
	//
	//	Designator | {StringValue} value=STRING | {IntegerValue} value=INT | {DoubleValue} value=DOUBLE;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Designator:
	//
	//	value=[ecore::EObject];
	public DesignatorElements getDesignatorAccess() {
		return (pDesignator != null) ? pDesignator : (pDesignator = new DesignatorElements());
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
